{"version":3,"sources":["utils/getOption.tsx","utils/format.ts","convertionTypes/uiComponents/InputElt.tsx","convertionTypes/Converter.tsx","convertionTypes/angle/Angle.ts","convertionTypes/angle/gradian.ts","convertionTypes/angle/mil.ts","convertionTypes/angle/radian.ts","convertionTypes/angle/degree.ts","convertionTypes/angle/turns.ts","utils/isOutOfRange.ts","utils/convertIfInRange.ts","convertionTypes/area/metreSq.ts","convertionTypes/area/acre.ts","convertionTypes/area/are.ts","convertionTypes/area/cmSq.ts","convertionTypes/area/footSq.ts","convertionTypes/area/hectare.ts","convertionTypes/area/inchSq.ts","convertionTypes/area/kmSq.ts","convertionTypes/area/landMileSq.ts","convertionTypes/area/seaMileSq.ts","convertionTypes/area/yardSq.ts","convertionTypes/area/converter.ts","convertionTypes/mass/kg.ts","convertionTypes/mass/g.ts","convertionTypes/mass/mg.ts","convertionTypes/mass/ounce.ts","convertionTypes/mass/pound.ts","convertionTypes/mass/tonne.ts","convertionTypes/mass/converter.ts","convertionTypes/length/metre.ts","convertionTypes/length/cm.ts","convertionTypes/length/foot.ts","convertionTypes/length/inch.ts","convertionTypes/length/km.ts","convertionTypes/length/landMile.ts","convertionTypes/length/league.ts","convertionTypes/length/mm.ts","convertionTypes/length/seaMile.ts","convertionTypes/length/yard.ts","convertionTypes/length/converter.ts","convertionTypes/pressure/pascal.ts","convertionTypes/pressure/atm.ts","convertionTypes/pressure/bar.ts","convertionTypes/pressure/psi.ts","convertionTypes/pressure/torr.ts","convertionTypes/pressure/converter.ts","convertionTypes/speed/meterPerSecond.ts","convertionTypes/speed/ftPerSec.ts","convertionTypes/speed/kmPerHr.ts","convertionTypes/speed/knot.ts","convertionTypes/speed/mach.ts","convertionTypes/speed/mph.ts","convertionTypes/speed/converter.ts","convertionTypes/temperature/kelvin.ts","convertionTypes/temperature/celsius.ts","convertionTypes/temperature/delisle.ts","convertionTypes/temperature/fahrenheit.ts","convertionTypes/temperature/newton.ts","convertionTypes/temperature/rankine.ts","convertionTypes/temperature/reaumur.ts","convertionTypes/temperature/romer.ts","convertionTypes/temperature/converter.ts","config/config.ts","convertionTypes/angle/converter.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getOption","unit","value","name","id","groupByNChars","text","nChar","sepChar","result","moduloOfLen","length","push","slice","i","join","formatNum","someNum","thousandSep","decimalSep","numOfDecimChars","isNaN","results","Math","abs","toFixed","split","InputElt","props","changeHandlerIn","changeHandler","idIn","labelIn","label","labelBrIn","labelBr","lengthIn","patternIn","pattern","placeholderIn","placeholder","sizeIn","size","valueIn","type","maxLength","onChange","Converter","units","main2secondary","secondary2main","additionalInfo","useState","inputDigits","setInputDigits","inUnits","setInUnits","howManyMainUnits","setHowManyMainUnits","inputThousandsSep","setInputThousandsSep","inputDecimalSep","setInputDecimalSep","useEffect","parseFloat","event","target","map","u","Angle","turns","_turns","_negative","this","_setInternals","angle","PI","_getTurns","t2m","t2r","t2d","NaN","isOutOfRange","lowExcl","highExcl","convertIfInRange","converter","minIncl","maxIncl","METRESQMAX","metreSq2acre","metreSq","mSq","metreSq2are","metreSq2cmSq","metreSq2footSq","metreSq2hectare","metreSq2inchSq","metreSq2kmSq","metreSq2landMileSq","metreSq2seaMileSq","metreSq2yardSq","ACREMIN","ACREMAX","AREMIN","AREMAX","CMSQMIN","CMSQMAX","FOOTSQMIN","FOOTSQMAX","HECTAREMIN","HECTAREMAX","INCHSQMIN","INCHSQMAX","KMSQMIN","KMSQMAX","LANDMILESQMIN","LANDMILESQMAX","SEAMILESQMIN","SEAMILESQMAX","YARDSQMIN","YARDSQMAX","KGMAX","kg2g","kg","k","kg2mg","kg2ounce","kg2pound","kg2tonne","GMIN","GMAX","MGMIN","MGMAX","OUNCEMIN","OUNCEMAX","POUNDMIN","POUNDMAX","TONNEMIN","TONNEMAX","METREMAX","metre2cm","metre","m","metre2foot","metre2inch","metre2km","metre2landMile","metre2league","metre2mm","metre2seaMile","metre2yard","CMMIN","CMMAX","FOOTMIN","FOOTMAX","INCHMIN","INCHMAX","KMMIN","KMMAX","LANDMILEMIN","LANDMILEMAX","LEAGUEMIN","LEAGUEMAX","MMMIN","MMMAX","SEAMILEMIN","SEAMILEMAX","YARDMIN","YARDMAX","PASCALMAX","pascal2atm","pascal","p","pascal2bar","pascal2psi","pascal2torr","ATMMIN","ATMMAX","BARMIN","BARMAX","PSIMIN","PSIMAX","TORRMIN","TORRMAX","METPERSECMAX","metPerSec2Mach","metPerSec","metPerSec2ftPerSec","metPerSec2knot","metPerSec2kmPerHr","metPerSec2mph","FTPERSECMIN","FTPERSECMAX","KMPERHRMIN","KMPERHRMAX","KNOTMIN","KNOTMAX","MACHMIN","MACHMAX","MPHMIN","MPHMAX","KELVINMAX","k2c","kelvin","k2f","k2ra","CELSIUSMIN","CELSIUSMAX","DELISLEMIN","DELISLEMAX","FAHRENHEITMIN","FAHRENHEITMAX","NEWTONMIN","NEWTONMAX","RANKINEMIN","RANKINEMAX","REAUMURMIN","REAUMURMAX","ROMERMIN","ROMERMAX","config","howMany","getAngleInUnits","setAngleInUnits","area","acr","ar","cSq","ftSq","hct","iSq","kSq","lmSq","smSq","ySq","mass","g","mg","o","t","c","f","km","lm","l","sm","y","pressure","a","b","speed","temperature","k2n","k2re","k2ro","d","n","ra","re","ro","App","convertions","keys","Object","getConvertionChoices","convChoice","setConvChoice","document","title","className","convertion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7bc6b11a.chunk.js","sourcesContent":["import { ReactElement } from \"react\";\nimport ISelectChoice from \"../interfaces/ISelectChoice\";\n\nconst getOption = (unit: ISelectChoice): ReactElement<HTMLElement> => {\n    return (\n        <option key={unit.id} value={unit.name}>\n            {unit.name}\n        </option>\n    );\n};\n\nexport default getOption;\n","// groups digits (in string) by nChars (or less if no equal division) from right\nfunction groupByNChars(\n    text: string,\n    nChar: number = 3,\n    sepChar: string = \" \"\n): string {\n    let result: string[] = [];\n    let moduloOfLen: number = text.length % nChar;\n    if (moduloOfLen !== 0) {\n        result.push(text.slice(0, moduloOfLen));\n    }\n    for (let i = moduloOfLen; i < text.length; i += nChar) {\n        result.push(text.slice(i, i + nChar));\n    }\n    return result.join(sepChar);\n}\n\nfunction formatNum(\n    someNum: number,\n    thousandSep: string = \"'\",\n    decimalSep: string = \".\",\n    numOfDecimChars: number = 3\n): string {\n    if (isNaN(someNum)) {\n        return \"NaN\";\n    }\n    let results: string[] = Math.abs(someNum).toFixed(numOfDecimChars).split(\".\");\n    let result: string =\n        groupByNChars(results[0], 3, thousandSep) +\n        decimalSep +\n        groupByNChars(results[1], 3, thousandSep);\n    return someNum < 0 ? \"-\" + result : result;\n}\n\nexport default formatNum;\n","import React, { ChangeEvent, ReactElement } from \"react\";\n\nimport \"./InputElt.css\";\n\ninterface handlerFn {\n    (event: ChangeEvent<HTMLInputElement>): void\n}\n\ninterface Props {\n    changeHandler: handlerFn;\n    id: string;\n    label: string;\n    labelBr?: boolean;\n    length: number;\n    pattern?: string;\n    placeholder?: string;\n    size: number;\n    value: string;\n}\n\nconst InputElt: React.FC<Props> = (props): ReactElement<HTMLInputElement> => {\n    const changeHandlerIn: handlerFn = props.changeHandler;\n    const idIn: string = props.id;\n    const labelIn: string = props.label;\n    const labelBrIn: boolean = props.labelBr ? props.labelBr : false;\n    const lengthIn: number = props.length;\n    const patternIn: string = props.pattern ? props.pattern : \".*\";\n    const placeholderIn: string = props.placeholder ? props.placeholder : \"\";\n    const sizeIn: number = props.size;\n    const valueIn: string = props.value;\n\n    return (\n        <div>\n            <span>{labelIn}: &nbsp;</span>\n            {labelBrIn ? <span><br /> <br /></span> : \"\"}\n            <input id={idIn} name={idIn} type=\"text\"\n                pattern={patternIn} placeholder={placeholderIn}\n                value={valueIn} maxLength={lengthIn} size={sizeIn}\n                onChange={changeHandlerIn} />\n        </div>\n    )\n\n}\n\nexport default InputElt;\n","import React, { ReactElement, useEffect, useState } from \"react\";\n\nimport getOption from \"../utils/getOption\";\nimport formatNum from \"../utils/format\";\nimport InputElt from \"./uiComponents/InputElt\";\nimport ISelectChoice from \"../interfaces/ISelectChoice\";\n\ninterface Props {\n    units: ISelectChoice[];\n    main2secondary: Function;\n    secondary2main: Function;\n    additionalInfo: string;\n}\n\nconst Converter: React.FC<Props> = (props): ReactElement<HTMLElement> => {\n    const units: ISelectChoice[] = props.units;\n    const main2secondary: Function = props.main2secondary;\n    const secondary2main: Function = props.secondary2main;\n    const additionalInfo: string = props.additionalInfo;\n\n    const [inputDigits, setInputDigits] = useState(\"0\");\n    const [inUnits, setInUnits] = useState(units[0].name);\n    const [howManyMainUnits, setHowManyMainUnits] = useState(0);\n\n    const handleTypingDigits = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setInputDigits(event.target.value);\n    };\n\n    const [inputThousandsSep, setInputThousandsSep] = useState(\",\");\n    const handleTypingThousandsSep = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setInputThousandsSep(event.target.value);\n    };\n\n    const [inputDecimalSep, setInputDecimalSep] = useState(\".\");\n    const handleTypingDecimalSep = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setInputDecimalSep(event.target.value);\n    };\n\n    const handleOption = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n        setInUnits(event.target.value);\n    };\n\n    useEffect(() => {\n        const handleConversion = (): void => {\n            setHowManyMainUnits(secondary2main(parseFloat(inputDigits), inUnits));\n        };\n        handleConversion();\n    }, [\n        howManyMainUnits,\n        secondary2main,\n        inputDigits,\n        inUnits,\n        inputThousandsSep,\n        inputDecimalSep,\n    ]);\n\n    useEffect(() => {\n        const setDefaults = (): void => {\n            setInputDigits(\"0\");\n            setHowManyMainUnits(0);\n            setInUnits(units[0].name);\n        };\n        setDefaults();\n    }, [units]);\n\n    const getOutput = (unit: ISelectChoice): ReactElement<HTMLElement> => {\n        return (\n            <p key={unit.id}>\n                {\" \"}\n                {formatNum(\n                    main2secondary(howManyMainUnits, unit.name),\n                    inputThousandsSep,\n                    inputDecimalSep\n                )}{\" \"}\n                [{unit.name}]\n            </p>\n        );\n    };\n\n    return (\n        <div>\n            <hr />\n            <InputElt id=\"digitsInput\"\n                label=\"Type some number (allowed chars: digits, period, -, +)\"\n                labelBr={true}\n                pattern=\"[-+]{0,1}[0-9]+\\.{0,1}[0-9]{0,}\"\n                placeholder=\"0.00\" length={15} size={15}\n                value={inputDigits} changeHandler={handleTypingDigits} />\n            <p>\n                (red border: incorrect input - may produce incorrect output/'NaN')\n                <br />\n                (exceeding conversion limit - may produce incorrect output/'NaN')\n            </p>\n            <p>Choose input units:</p>\n            <select value={inUnits} onChange={handleOption}>\n                {units.map((unit) => getOption(unit))}\n            </select>\n            <p>{additionalInfo}</p>\n            <InputElt id=\"thousandsSep\"\n                label=\"Thousands separator\" length={1} size={1}\n                value={inputThousandsSep}\n                changeHandler={handleTypingThousandsSep} />\n            <InputElt id=\"decimalSep\"\n                label=\"Decimal separator\" length={1} size={1}\n                value={inputDecimalSep}\n                changeHandler={handleTypingDecimalSep} />\n            <h2>&#187;</h2>\n            <div>{units.map((u) => getOutput(u))}</div>\n        </div>\n    );\n};\n\nexport default Converter;\n","import { d2t } from \"./degree\";\nimport { g2t } from \"./gradian\";\nimport { m2t } from \"./mil\";\nimport { r2t } from \"./radian\";\nimport { t2d, t2g, t2m, t2r } from \"./turns\";\n\nclass Angle {\n    private _turns: number = 0;\n    private _negative: boolean = false;\n\n    constructor(turns: number = 0) {\n        this._setInternals(turns);\n    }\n\n    private _setInternals(turns: number = 0): void {\n        turns = (Math.abs(turns) > 1) ? (turns % 1) : turns;\n        if (turns < 0) {\n            this._turns = 1 - turns;\n            this._negative = true;\n        } else {\n            this._turns = turns;\n            this._negative = false;\n        }\n    }\n\n    private _getTurns(): number {\n        return this._negative ? (1 - this._turns) : this._turns;\n    }\n\n    public setAngleInUnits(angle: number, units: string): void {\n        if (units === \"gradian\") {\n            this._setInternals(g2t(angle));\n        } else if (units === \"mil\") {\n            this._setInternals(m2t(angle));\n        } else if (units === \"radian\") {\n            this._setInternals(r2t(angle));\n        } else if (units === \"degree\") {\n            this._setInternals(d2t(angle));\n        } else if (units === \"turn\") {\n            this._setInternals(angle);\n        }\n    }\n\n    public getAngleInUnits(units: string): number {\n        if (units === \"gradian\") {\n            return t2g(this._getTurns());\n        } else if (units === \"mil\") {\n            return t2m(this._getTurns());\n        } else if (units === \"radian\") {\n            return t2r(this._getTurns());\n        } else if (units === \"degree\") {\n            return t2d(this._getTurns());\n        } else if (units === \"turn\") {\n            return this._getTurns();\n        } else {\n            return NaN;\n        }\n    }\n}\n\nexport default Angle;\n","function g2t(gradians: number): number {\n    let turns: number = gradians / 400;\n    return turns;\n}\n\nexport { g2t };\n","function m2t(mils: number): number {\n    let turns: number = mils / 6400;\n    return turns;\n}\n\nexport { m2t };\n","function r2t(radians: number): number {\n    let turns: number = radians / (2 * Math.PI);\n    return turns;\n}\n\nexport { r2t };\n","function d2t(degrees: number): number {\n    let turns: number = degrees / 360;\n    return turns;\n}\n\nexport { d2t };\n","function t2d(turns: number): number {\n    let degrees: number = turns * 360;\n    return degrees;\n}\n\nfunction t2g(turns: number): number {\n    let gradians: number = turns * 400;\n    return gradians;\n}\n\nfunction t2m(turns: number): number {\n    let mils: number = turns * 6400;\n    return mils;\n}\n\nfunction t2r(turns: number): number {\n    let radians: number = turns * (2 * Math.PI);\n    return radians;\n}\n\nexport { t2d, t2g, t2m, t2r };\n","function isOutOfRange(someNum: number,\n    lowExcl: number, highExcl: number): boolean {\n    if (someNum < lowExcl || someNum > highExcl) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport default isOutOfRange;\n","import isOutOfRange from \"./isOutOfRange\";\n\nfunction convertIfInRange(someNum: number,\n    converter: Function,\n    minIncl: number,\n    maxIncl: number): number {\n    if (isOutOfRange(someNum, minIncl, maxIncl)) {\n        return NaN;\n    } else {\n        return converter(someNum);\n    }\n}\n\nexport { convertIfInRange };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\n\nconst METRESQMIN: number = 0;\nconst METRESQMAX: number = 1e15;\n\n// mostly based on en.wikipedia + some google searches\nfunction metreSq2acre(metreSq: number): number {\n    return convertIfInRange(\n        metreSq,\n        (mSq: number): number => mSq * 0.000247105381,\n        METRESQMIN,\n        METRESQMAX\n    );\n}\n\nfunction metreSq2are(metreSq: number): number {\n    return convertIfInRange(\n        metreSq,\n        (mSq: number): number => mSq / 100,\n        METRESQMIN,\n        METRESQMAX\n    );\n}\n\nfunction metreSq2cmSq(metreSq: number): number {\n    return convertIfInRange(\n        metreSq,\n        (mSq: number): number => mSq * 1e4,\n        METRESQMIN,\n        METRESQMAX\n    );\n}\n\nfunction metreSq2footSq(metreSq: number): number {\n    return convertIfInRange(\n        metreSq,\n        (mSq: number): number => mSq * 10.76391042,\n        METRESQMIN,\n        METRESQMAX\n    );\n}\n\nfunction metreSq2hectare(metreSq: number): number {\n    return convertIfInRange(\n        metreSq,\n        (mSq: number): number => mSq / 10000,\n        METRESQMIN,\n        METRESQMAX\n    );\n}\n\nfunction metreSq2inchSq(metreSq: number): number {\n    return convertIfInRange(\n        metreSq,\n        (mSq: number): number => mSq * 1550.0031,\n        METRESQMIN,\n        METRESQMAX\n    );\n}\n\nfunction metreSq2kmSq(metreSq: number): number {\n    return convertIfInRange(\n        metreSq,\n        (mSq: number): number => mSq / 1e6,\n        METRESQMIN,\n        METRESQMAX\n    );\n}\n\nfunction metreSq2landMileSq(metreSq: number): number {\n    return convertIfInRange(\n        metreSq,\n        (mSq: number): number => mSq / 2589988.10,\n        METRESQMIN,\n        METRESQMAX\n    );\n}\n\nfunction metreSq2seaMileSq(metreSq: number): number {\n    return convertIfInRange(\n        metreSq,\n        (mSq: number): number => mSq / 3429904,\n        METRESQMIN,\n        METRESQMAX\n    );\n}\n\nfunction metreSq2yardSq(metreSq: number): number {\n    return convertIfInRange(\n        metreSq,\n        (mSq: number): number => mSq / 0.83612736,\n        METRESQMIN,\n        METRESQMAX\n    );\n}\n\nexport {\n    METRESQMIN,\n    METRESQMAX,\n    metreSq2acre,\n    metreSq2are,\n    metreSq2cmSq,\n    metreSq2footSq,\n    metreSq2hectare,\n    metreSq2inchSq,\n    metreSq2kmSq,\n    metreSq2landMileSq,\n    metreSq2seaMileSq,\n    metreSq2yardSq,\n};\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METRESQMIN, METRESQMAX, metreSq2acre } from \"./metreSq\";\n\nconst ACREMIN: number = metreSq2acre(METRESQMIN);\nconst ACREMAX: number = metreSq2acre(METRESQMAX);\n\nfunction acre2metreSq(acre: number): number {\n    return convertIfInRange(acre,\n        (acr: number): number => acr / 0.000247105381,\n        ACREMIN, ACREMAX);\n}\n\nexport { acre2metreSq };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METRESQMIN, METRESQMAX, metreSq2are } from \"./metreSq\";\n\nconst AREMIN: number = metreSq2are(METRESQMIN);\nconst AREMAX: number = metreSq2are(METRESQMAX);\n\nfunction are2metreSq(are: number): number {\n    return convertIfInRange(are,\n        (ar: number): number => ar * 100,\n        AREMIN, AREMAX);\n}\n\nexport { are2metreSq };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METRESQMIN, METRESQMAX, metreSq2cmSq } from \"./metreSq\";\n\nconst CMSQMIN: number = metreSq2cmSq(METRESQMIN);\nconst CMSQMAX: number = metreSq2cmSq(METRESQMAX);\n\nfunction cmSq2metreSq(cmSq: number): number {\n    return convertIfInRange(cmSq,\n        (cSq: number): number => cSq / 1e4,\n        CMSQMIN, CMSQMAX);\n}\n\nexport { cmSq2metreSq };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METRESQMIN, METRESQMAX, metreSq2footSq } from \"./metreSq\";\n\nconst FOOTSQMIN: number = metreSq2footSq(METRESQMIN);\nconst FOOTSQMAX: number = metreSq2footSq(METRESQMAX);\n\nfunction footSq2metreSq(footSq: number): number {\n    return convertIfInRange(footSq,\n        (ftSq: number): number => ftSq * 0.09290304,\n        FOOTSQMIN, FOOTSQMAX);\n}\n\nexport { footSq2metreSq };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METRESQMIN, METRESQMAX, metreSq2hectare } from \"./metreSq\";\n\nconst HECTAREMIN: number = metreSq2hectare(METRESQMIN);\nconst HECTAREMAX: number = metreSq2hectare(METRESQMAX);\n\nfunction hectare2metreSq(hectare: number): number {\n    return convertIfInRange(hectare,\n        (hct: number): number => hct * 10000,\n        HECTAREMIN, HECTAREMAX);\n}\n\nexport { hectare2metreSq };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METRESQMIN, METRESQMAX, metreSq2inchSq } from \"./metreSq\";\n\nconst INCHSQMIN: number = metreSq2inchSq(METRESQMIN);\nconst INCHSQMAX: number = metreSq2inchSq(METRESQMAX);\n\nfunction inchSq2metreSq(inchSq: number): number {\n    return convertIfInRange(inchSq,\n        (iSq: number): number => iSq / 1550.0031,\n        INCHSQMIN, INCHSQMAX);\n}\n\nexport { inchSq2metreSq };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METRESQMIN, METRESQMAX, metreSq2kmSq } from \"./metreSq\";\n\nconst KMSQMIN: number = metreSq2kmSq(METRESQMIN);\nconst KMSQMAX: number = metreSq2kmSq(METRESQMAX);\n\nfunction kmSq2metreSq(kmSq: number): number {\n    return convertIfInRange(kmSq,\n        (kSq: number): number => kSq * 1e6,\n        KMSQMIN, KMSQMAX);\n}\n\nexport { kmSq2metreSq };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METRESQMIN, METRESQMAX, metreSq2landMileSq } from \"./metreSq\";\n\nconst LANDMILESQMIN: number = metreSq2landMileSq(METRESQMIN);\nconst LANDMILESQMAX: number = metreSq2landMileSq(METRESQMAX);\n\nfunction landMileSq2metreSq(landMileSq: number): number {\n    return convertIfInRange(landMileSq,\n        (lmSq: number): number => lmSq * 2589988.10,\n        LANDMILESQMIN, LANDMILESQMAX);\n}\n\nexport { landMileSq2metreSq };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METRESQMIN, METRESQMAX, metreSq2seaMileSq } from \"./metreSq\";\n\nconst SEAMILESQMIN: number = metreSq2seaMileSq(METRESQMIN);\nconst SEAMILESQMAX: number = metreSq2seaMileSq(METRESQMAX);\n\nfunction seaMileSq2metreSq(seaMileSq: number): number {\n    return convertIfInRange(seaMileSq,\n        (smSq: number): number => smSq * 3429904,\n        SEAMILESQMIN, SEAMILESQMAX);\n}\n\nexport { seaMileSq2metreSq };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METRESQMIN, METRESQMAX, metreSq2yardSq } from \"./metreSq\";\n\nconst YARDSQMIN: number = metreSq2yardSq(METRESQMIN);\nconst YARDSQMAX: number = metreSq2yardSq(METRESQMAX);\n\nfunction yardSq2metreSq(yardSq: number): number {\n    return convertIfInRange(yardSq,\n        (ySq: number): number => ySq * 0.83612736,\n        YARDSQMIN, YARDSQMAX);\n}\n\nexport { yardSq2metreSq };\n","import { acre2metreSq } from \"./acre\";\nimport { are2metreSq } from \"./are\";\nimport { cmSq2metreSq } from \"./cmSq\";\nimport { footSq2metreSq } from \"./footSq\";\nimport { hectare2metreSq } from \"./hectare\";\nimport { inchSq2metreSq } from \"./inchSq\";\nimport { kmSq2metreSq } from \"./kmSq\";\nimport { landMileSq2metreSq } from \"./landMileSq\";\nimport { metreSq2acre, metreSq2are, metreSq2cmSq, metreSq2footSq, metreSq2hectare, metreSq2inchSq, metreSq2kmSq, metreSq2landMileSq, metreSq2seaMileSq, metreSq2yardSq } from \"./metreSq\";\nimport { seaMileSq2metreSq } from \"./seaMileSq\";\nimport { yardSq2metreSq } from \"./yardSq\";\n\nimport ISelectChoice from \"../../interfaces/ISelectChoice\";\n\nfunction metreSq2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"acre\":\n            return metreSq2acre(howMany);\n        case \"are\":\n            return metreSq2are(howMany);\n        case \"square cm\":\n            return metreSq2cmSq(howMany);\n        case \"square foot\":\n            return metreSq2footSq(howMany);\n        case \"hectare\":\n            return metreSq2hectare(howMany);\n        case \"square inch\":\n            return metreSq2inchSq(howMany);\n        case \"square km\":\n            return metreSq2kmSq(howMany);\n        case \"square land mile\":\n            return metreSq2landMileSq(howMany);\n        case \"square sea mile\":\n            return metreSq2seaMileSq(howMany);\n        case \"square yard\":\n            return metreSq2yardSq(howMany);\n        case \"square metre\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2metreSq(howMany: number, units: string): number {\n    switch (units) {\n        case \"acre\":\n            return acre2metreSq(howMany);\n        case \"are\":\n            return are2metreSq(howMany);\n        case \"square cm\":\n            return cmSq2metreSq(howMany);\n        case \"square foot\":\n            return footSq2metreSq(howMany);\n        case \"hectare\":\n            return hectare2metreSq(howMany);\n        case \"square inch\":\n            return inchSq2metreSq(howMany);\n        case \"square km\":\n            return kmSq2metreSq(howMany);\n        case \"square land mile\":\n            return landMileSq2metreSq(howMany);\n        case \"square sea mile\":\n            return seaMileSq2metreSq(howMany);\n        case \"square yard\":\n            return yardSq2metreSq(howMany);\n        case \"square metre\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst areaUnits: ISelectChoice[] = [\n    { id: 0, name: \"acre\" },\n    { id: 1, name: \"are\" },\n    { id: 2, name: \"hectare\" },\n    { id: 3, name: \"square cm\" },\n    { id: 4, name: \"square foot\" },\n    { id: 5, name: \"square inch\" },\n    { id: 6, name: \"square km\" },\n    { id: 7, name: \"square land mile\" },\n    { id: 8, name: \"square metre\" },\n    { id: 9, name: \"square sea mile\" },\n    { id: 10, name: \"square yard\" },\n];\n\nconst areaInfo: string = \"limit: 0-1e15 [square metre]\";\n\nexport { areaInfo, areaUnits, metreSq2units, units2metreSq };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\n\nconst KGMIN: number = 0;\nconst KGMAX: number = 1e15;\n\n// mostly based on en.wikipedia + some google searches\nfunction kg2g(kg: number): number {\n    return convertIfInRange(\n        kg,\n        (k: number): number => k * 1e3,\n        KGMIN,\n        KGMAX\n    );\n}\n\nfunction kg2mg(kg: number): number {\n    return convertIfInRange(\n        kg,\n        (k: number): number => k * 1e6,\n        KGMIN,\n        KGMAX\n    );\n}\n\nfunction kg2ounce(kg: number): number {\n    return convertIfInRange(\n        kg,\n        (k: number): number => k * 35.2739619,\n        KGMIN,\n        KGMAX\n    );\n}\n\nfunction kg2pound(kg: number): number {\n    return convertIfInRange(\n        kg,\n        (k: number): number => k / 0.45359237,\n        KGMIN,\n        KGMAX\n    );\n}\n\nfunction kg2tonne(kg: number): number {\n    return convertIfInRange(\n        kg,\n        (k: number): number => k / 1e3,\n        KGMIN,\n        KGMAX\n    );\n}\n\nexport { KGMIN, KGMAX, kg2g, kg2mg, kg2ounce, kg2pound, kg2tonne };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KGMIN, KGMAX, kg2g } from \"./kg\";\n\nconst GMIN: number = kg2g(KGMIN);\nconst GMAX: number = kg2g(KGMAX);\n\nfunction g2kg(gram: number): number {\n    return convertIfInRange(gram,\n        (g: number): number => g / 1e3,\n        GMIN, GMAX);\n}\n\nexport { g2kg };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KGMIN, KGMAX, kg2mg } from \"./kg\";\n\nconst MGMIN: number = kg2mg(KGMIN);\nconst MGMAX: number = kg2mg(KGMAX);\n\nfunction mg2kg(miligram: number): number {\n    return convertIfInRange(miligram,\n        (mg: number): number => mg / 1e6,\n        MGMIN, MGMAX);\n}\n\nexport { mg2kg };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KGMIN, KGMAX, kg2ounce } from \"./kg\";\n\nconst OUNCEMIN: number = kg2ounce(KGMIN);\nconst OUNCEMAX: number = kg2ounce(KGMAX);\n\nfunction ounce2kg(ounce: number): number {\n    return convertIfInRange(ounce,\n        (o: number): number => o / 35.2739619,\n        OUNCEMIN, OUNCEMAX);\n}\n\nexport { ounce2kg };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KGMIN, KGMAX, kg2pound } from \"./kg\";\n\nconst POUNDMIN: number = kg2pound(KGMIN);\nconst POUNDMAX: number = kg2pound(KGMAX);\n\nfunction pound2kg(pound: number): number {\n    return convertIfInRange(pound,\n        (p: number): number => p * 0.45359237,\n        POUNDMIN, POUNDMAX);\n}\n\nexport { pound2kg };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KGMIN, KGMAX, kg2tonne } from \"./kg\";\n\nconst TONNEMIN: number = kg2tonne(KGMIN);\nconst TONNEMAX: number = kg2tonne(KGMAX);\n\nfunction tonne2kg(tonne: number): number {\n    return convertIfInRange(tonne,\n        (t: number): number => t * 1e3,\n        TONNEMIN, TONNEMAX);\n}\n\nexport { tonne2kg };\n","import { g2kg } from \"./g\";\nimport { kg2g, kg2mg, kg2ounce, kg2pound, kg2tonne } from \"./kg\";\nimport { mg2kg } from \"./mg\";\nimport { ounce2kg } from \"./ounce\";\nimport { pound2kg } from \"./pound\";\nimport { tonne2kg } from \"./tonne\";\n\nimport ISelectChoice from \"../../interfaces/ISelectChoice\";\n\nfunction kg2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"g\":\n            return kg2g(howMany);\n        case \"mg\":\n            return kg2mg(howMany);\n        case \"ounce\":\n            return kg2ounce(howMany);\n        case \"pound\":\n            return kg2pound(howMany);\n        case \"tonne\":\n            return kg2tonne(howMany);\n        case \"kg\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2kg(howMany: number, units: string): number {\n    switch (units) {\n        case \"g\":\n            return g2kg(howMany);\n        case \"mg\":\n            return mg2kg(howMany);\n        case \"ounce\":\n            return ounce2kg(howMany);\n        case \"pound\":\n            return pound2kg(howMany);\n        case \"tonne\":\n            return tonne2kg(howMany);\n        case \"kg\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst massUnits: ISelectChoice[] = [\n    { id: 0, name: \"g\" },\n    { id: 1, name: \"kg\" },\n    { id: 2, name: \"mg\" },\n    { id: 3, name: \"ounce\" },\n    { id: 4, name: \"pound\" },\n    { id: 5, name: \"tonne\" },\n];\n\nconst massInfo: string = \"limit: 0-1e15 [kg], SI and imperial/US units, [ounce] == [oz], [pound] = [lb]\";\n\nexport { massInfo, massUnits, kg2units, units2kg };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\n\nconst METREMIN: number = 0;\nconst METREMAX: number = 1e15;\n\n// mostly based on en.wikipedia + some google searches\nfunction metre2cm(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m * 1e2,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2foot(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m * 1e2 / 30.48,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2inch(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m * 1e2 / 2.54,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2km(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m / 1e3,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2landMile(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m / 1609.344,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2league(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m / 5556,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2mm(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m * 1e3,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2seaMile(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m / 1852,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2yard(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m / 0.9144,\n        METREMIN,\n        METREMAX\n    );\n}\n\nexport {\n    METREMIN,\n    METREMAX,\n    metre2cm,\n    metre2foot,\n    metre2inch,\n    metre2km,\n    metre2landMile,\n    metre2league,\n    metre2mm,\n    metre2seaMile,\n    metre2yard,\n};\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2cm } from \"./metre\";\n\nconst CMMIN: number = metre2cm(METREMIN);\nconst CMMAX: number = metre2cm(METREMAX);\n\nfunction cm2metre(cm: number): number {\n    return convertIfInRange(cm,\n        (c: number): number => c / 1e2,\n        CMMIN, CMMAX);\n}\n\nexport { cm2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2foot } from \"./metre\";\n\nconst FOOTMIN: number = metre2foot(METREMIN);\nconst FOOTMAX: number = metre2foot(METREMAX);\n\nfunction foot2metre(foot: number): number {\n    return convertIfInRange(foot,\n        (f: number): number => f * 30.48 / 1e2,\n        FOOTMIN, FOOTMAX);\n}\n\nexport { foot2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2inch } from \"./metre\";\n\nconst INCHMIN: number = metre2inch(METREMIN);\nconst INCHMAX: number = metre2inch(METREMAX);\n\nfunction inch2metre(inch: number): number {\n    return convertIfInRange(inch,\n        (i: number): number => i * 2.54 / 1e2,\n        INCHMIN, INCHMAX);\n}\n\nexport { inch2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2km } from \"./metre\";\n\nconst KMMIN: number = metre2km(METREMIN);\nconst KMMAX: number = metre2km(METREMAX);\n\nfunction km2metre(km: number): number {\n    return convertIfInRange(km,\n        (km: number): number => km * 1e3,\n        KMMIN, KMMAX);\n}\n\nexport { km2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2landMile } from \"./metre\";\n\nconst LANDMILEMIN: number = metre2landMile(METREMIN);\nconst LANDMILEMAX: number = metre2landMile(METREMAX);\n\nfunction landMile2metre(landMile: number): number {\n    return convertIfInRange(landMile,\n        (lm: number): number => lm * 1609.344,\n        LANDMILEMIN, LANDMILEMAX);\n}\n\nexport { landMile2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2league } from \"./metre\";\n\nconst LEAGUEMIN: number = metre2league(METREMIN);\nconst LEAGUEMAX: number = metre2league(METREMAX);\n\nfunction league2metre(league: number): number {\n    return convertIfInRange(league,\n        (l: number): number => l * 5556,\n        LEAGUEMIN, LEAGUEMAX);\n}\n\nexport { league2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2mm } from \"./metre\";\n\nconst MMMIN: number = metre2mm(METREMIN);\nconst MMMAX: number = metre2mm(METREMAX);\n\nfunction mm2metre(mm: number): number {\n    return convertIfInRange(mm,\n        (i: number): number => i / 1e3,\n        MMMIN, MMMAX);\n}\n\nexport { mm2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2seaMile } from \"./metre\";\n\nconst SEAMILEMIN: number = metre2seaMile(METREMIN);\nconst SEAMILEMAX: number = metre2seaMile(METREMAX);\n\nfunction seaMile2metre(seaMile: number): number {\n    return convertIfInRange(seaMile,\n        (sm: number): number => sm * 1852,\n        SEAMILEMIN, SEAMILEMAX);\n}\n\nexport { seaMile2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2yard } from \"./metre\";\n\nconst YARDMIN: number = metre2yard(METREMIN);\nconst YARDMAX: number = metre2yard(METREMAX);\n\nfunction yard2metre(yard: number): number {\n    return convertIfInRange(yard,\n        (y: number): number => y * 0.9144,\n        YARDMIN, YARDMAX);\n}\n\nexport { yard2metre };\n","import { cm2metre } from \"./cm\";\nimport { foot2metre } from \"./foot\"\nimport { inch2metre } from \"./inch\";\nimport { km2metre } from \"./km\";\nimport { landMile2metre } from \"./landMile\";\nimport { league2metre } from \"./league\";\nimport { metre2cm, metre2foot, metre2inch, metre2km, metre2landMile, metre2league, metre2mm, metre2seaMile, metre2yard } from \"./metre\";\nimport { mm2metre } from \"./mm\";\nimport { seaMile2metre } from \"./seaMile\";\nimport { yard2metre } from \"./yard\";\n\nimport ISelectChoice from \"../../interfaces/ISelectChoice\";\n\nfunction metre2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"cm\":\n            return metre2cm(howMany);\n        case \"foot\":\n            return metre2foot(howMany);\n        case \"inch\":\n            return metre2inch(howMany);\n        case \"km\":\n            return metre2km(howMany);\n        case \"land mile\":\n            return metre2landMile(howMany);\n        case \"league\":\n            return metre2league(howMany);\n        case \"mm\":\n            return metre2mm(howMany);\n        case \"sea mile\":\n            return metre2seaMile(howMany);\n        case \"yard\":\n            return metre2yard(howMany);\n        case \"metre\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2metre(howMany: number, units: string): number {\n    switch (units) {\n        case \"cm\":\n            return cm2metre(howMany);\n        case \"foot\":\n            return foot2metre(howMany);\n        case \"inch\":\n            return inch2metre(howMany);\n        case \"km\":\n            return km2metre(howMany);\n        case \"land mile\":\n            return landMile2metre(howMany);\n        case \"league\":\n            return league2metre(howMany);\n        case \"mm\":\n            return mm2metre(howMany);\n        case \"sea mile\":\n            return seaMile2metre(howMany);\n        case \"yard\":\n            return yard2metre(howMany);\n        case \"metre\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst lengthUnits: ISelectChoice[] = [\n    { id: 0, name: \"cm\" },\n    { id: 1, name: \"foot\" },\n    { id: 2, name: \"inch\" },\n    { id: 3, name: \"km\" },\n    { id: 4, name: \"land mile\" },\n    { id: 5, name: \"league\" },\n    { id: 6, name: \"metre\" },\n    { id: 7, name: \"mm\" },\n    { id: 8, name: \"sea mile\" },\n    { id: 9, name: \"yard\" },\n];\n\nconst lengthInfo: string = \"limit: 0-1e15 [metre], SI and imperial/US units\";\n\nexport { lengthInfo, lengthUnits, metre2units, units2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\n\nconst PASCALMIN: number = 0;\nconst PASCALMAX: number = 1e12;\n\n// convertions determined mostly based on info found on en.wikipedia.org\n// e.g. here -> https://en.wikipedia.org/wiki/Torr#Conversion_factors\n// somethimes i used google\n\nfunction pascal2atm(pascal: number): number {\n    return convertIfInRange(pascal,\n        (p: number): number => p * (9.86923267 / 1e6),\n        PASCALMIN, PASCALMAX);\n}\n\nfunction pascal2bar(pascal: number): number {\n    return convertIfInRange(pascal,\n        (p: number): number => p / 1e5,\n        PASCALMIN, PASCALMAX);\n}\n\nfunction pascal2psi(pascal: number): number {\n    return convertIfInRange(pascal,\n        (p: number): number => p * (1.45037738 / 1e4),\n        PASCALMIN, PASCALMAX);\n}\n\n// torr (mm/hg)\nfunction pascal2torr(pascal: number): number {\n    return convertIfInRange(pascal,\n        (p: number): number => p * (7.50061683 / 1e3),\n        PASCALMIN, PASCALMAX);\n}\n\nexport { PASCALMIN, PASCALMAX, pascal2atm, pascal2bar, pascal2psi, pascal2torr };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { PASCALMIN, PASCALMAX, pascal2atm } from \"./pascal\";\n\nconst ATMMIN: number = pascal2atm(PASCALMIN);\nconst ATMMAX: number = pascal2atm(PASCALMAX);\n\nfunction atm2pascal(atm: number): number {\n    return convertIfInRange(atm,\n        (a: number): number => a * 101325,\n        ATMMIN, ATMMAX);\n}\n\nexport { atm2pascal };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { PASCALMIN, PASCALMAX, pascal2bar } from \"./pascal\";\n\nconst BARMIN: number = pascal2bar(PASCALMIN);\nconst BARMAX: number = pascal2bar(PASCALMAX);\n\nfunction bar2pascal(bar: number): number {\n    return convertIfInRange(bar,\n        (b: number): number => b * 1e5,\n        BARMIN, BARMAX);\n}\n\nexport { bar2pascal };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { PASCALMIN, PASCALMAX, pascal2psi } from \"./pascal\";\n\nconst PSIMIN: number = pascal2psi(PASCALMIN);\nconst PSIMAX: number = pascal2psi(PASCALMAX);\n\nfunction psi2pascal(psi: number): number {\n    return convertIfInRange(psi,\n        (a: number): number => a * 6894.75729,\n        PSIMIN, PSIMAX);\n}\n\nexport { psi2pascal };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { PASCALMIN, PASCALMAX, pascal2torr } from \"./pascal\";\n\nconst TORRMIN: number = pascal2torr(PASCALMIN);\nconst TORRMAX: number = pascal2torr(PASCALMAX);\n\nfunction torr2pascal(torr: number): number {\n    return convertIfInRange(torr,\n        (a: number): number => a * 133.3223684211,\n        TORRMIN, TORRMAX);\n}\n\nexport { torr2pascal };\n","import { atm2pascal } from \"./atm\";\nimport { bar2pascal } from \"./bar\";\nimport { pascal2atm, pascal2bar, pascal2psi, pascal2torr } from \"./pascal\";\nimport { psi2pascal } from \"./psi\";\nimport { torr2pascal } from \"./torr\";\n\nimport ISelectChoice from \"../../interfaces/ISelectChoice\";\n\nfunction pascal2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"atm\":\n            return pascal2atm(howMany);\n        case \"bar\":\n            return pascal2bar(howMany);\n        case \"psi\":\n            return pascal2psi(howMany);\n        case \"torr\":\n            return pascal2torr(howMany);\n        case \"pascal\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2pascal(howMany: number, units: string): number {\n    switch (units) {\n        case \"atm\":\n            return atm2pascal(howMany);\n        case \"bar\":\n            return bar2pascal(howMany);\n        case \"psi\":\n            return psi2pascal(howMany);\n        case \"torr\":\n            return torr2pascal(howMany);\n        case \"pascal\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst pressureInfo: string = \"limit: 0-1e12 [pascal], [torr] == [mmHg]\";\n\nconst pressureUnits: ISelectChoice[] = [\n    { id: 0, name: \"atm\" },\n    { id: 1, name: \"bar\" },\n    { id: 2, name: \"pascal\" },\n    { id: 3, name: \"psi\" },\n    { id: 4, name: \"torr\" },\n];\n\nexport { pascal2units, units2pascal, pressureInfo, pressureUnits };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\n\nconst METPERSECMIN: number = 0;\nconst METPERSECMAX: number = 1e15;\n\n// convertions determined mostly based on info found on en.wikipedia.org\n// somethimes i used google\n\nfunction metPerSec2Mach(metPerSec: number): number {\n    return convertIfInRange(metPerSec,\n        (m: number): number => m / 340.29,\n        METPERSECMIN, METPERSECMAX);\n}\n\nfunction metPerSec2ftPerSec(metPerSec: number): number {\n    return convertIfInRange(metPerSec,\n        (m: number): number => m * 3.2808399,\n        METPERSECMIN, METPERSECMAX);\n}\n\nfunction metPerSec2knot(metPerSec: number): number {\n    return convertIfInRange(metPerSec,\n        (m: number): number => m * 1.94384449,\n        METPERSECMIN, METPERSECMAX);\n}\n\nfunction metPerSec2kmPerHr(metPerSec: number): number {\n    return convertIfInRange(metPerSec,\n        (m: number): number => m * 3.6,\n        METPERSECMIN, METPERSECMAX);\n}\n\nfunction metPerSec2mph(metPerSec: number): number {\n    return convertIfInRange(metPerSec,\n        (m: number): number => m * 2.23693629,\n        METPERSECMIN, METPERSECMAX);\n}\n\nexport { METPERSECMIN, METPERSECMAX, metPerSec2Mach, metPerSec2ftPerSec, metPerSec2knot, metPerSec2kmPerHr, metPerSec2mph };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { metPerSec2ftPerSec, METPERSECMIN, METPERSECMAX } from \"./meterPerSecond\";\n\nconst FTPERSECMIN: number = metPerSec2ftPerSec(METPERSECMIN);\nconst FTPERSECMAX: number = metPerSec2ftPerSec(METPERSECMAX);\n\nfunction ftPerSec2metPerSec(ftPerSec: number): number {\n    return convertIfInRange(ftPerSec,\n        (f: number): number => f / 3.2808399,\n        FTPERSECMIN, FTPERSECMAX);\n}\n\nexport { ftPerSec2metPerSec };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { metPerSec2kmPerHr, METPERSECMIN, METPERSECMAX } from \"./meterPerSecond\";\n\nconst KMPERHRMIN: number = metPerSec2kmPerHr(METPERSECMIN);\nconst KMPERHRMAX: number = metPerSec2kmPerHr(METPERSECMAX);\n\nfunction kmPerHr2metPerSec(kmPerHr: number): number {\n    return convertIfInRange(kmPerHr,\n        (m: number): number => m / 3.6,\n        KMPERHRMIN, KMPERHRMAX);\n}\n\nexport { kmPerHr2metPerSec };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { metPerSec2knot, METPERSECMIN, METPERSECMAX } from \"./meterPerSecond\";\n\nconst KNOTMIN: number = metPerSec2knot(METPERSECMIN);\nconst KNOTMAX: number = metPerSec2knot(METPERSECMAX);\n\nfunction knot2metPerSec(knot: number): number {\n    return convertIfInRange(knot,\n        (k: number): number => k / 1.94384449,\n        KNOTMIN, KNOTMAX);\n}\n\nexport { knot2metPerSec };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { metPerSec2Mach, METPERSECMIN, METPERSECMAX } from \"./meterPerSecond\";\n\nconst MACHMIN: number = metPerSec2Mach(METPERSECMIN);\nconst MACHMAX: number = metPerSec2Mach(METPERSECMAX);\n\nfunction mach2metPerSec(mach: number): number {\n    return convertIfInRange(mach,\n        (m: number): number => m * 340.29,\n        MACHMIN, MACHMAX);\n}\n\nexport { mach2metPerSec };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { metPerSec2mph, METPERSECMIN, METPERSECMAX } from \"./meterPerSecond\";\n\nconst MPHMIN: number = metPerSec2mph(METPERSECMIN);\nconst MPHMAX: number = metPerSec2mph(METPERSECMAX);\n\nfunction mph2metPerSec(mph: number): number {\n    return convertIfInRange(mph,\n        (m: number): number => m / 2.23693629,\n        MPHMIN, MPHMAX);\n}\n\nexport { mph2metPerSec };\n","import { ftPerSec2metPerSec } from \"./ftPerSec\";\nimport { kmPerHr2metPerSec } from \"./kmPerHr\";\nimport { knot2metPerSec } from \"./knot\";\nimport { mach2metPerSec } from \"./mach\";\nimport {\n    metPerSec2Mach,\n    metPerSec2ftPerSec,\n    metPerSec2knot,\n    metPerSec2kmPerHr,\n    metPerSec2mph,\n} from \"./meterPerSecond\";\nimport { mph2metPerSec } from \"./mph\";\n\nimport ISelectChoice from \"../../interfaces/ISelectChoice\";\n\nfunction mPerSec2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"Ma\":\n            return metPerSec2Mach(howMany);\n        case \"ft/s\":\n            return metPerSec2ftPerSec(howMany);\n        case \"knot\":\n            return metPerSec2knot(howMany);\n        case \"km/h\":\n            return metPerSec2kmPerHr(howMany);\n        case \"mph\":\n            return metPerSec2mph(howMany);\n        case \"m/s\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2mPerSec(howMany: number, units: string): number {\n    switch (units) {\n        case \"Ma\":\n            return mach2metPerSec(howMany);\n        case \"ft/s\":\n            return ftPerSec2metPerSec(howMany);\n        case \"knot\":\n            return knot2metPerSec(howMany);\n        case \"km/h\":\n            return kmPerHr2metPerSec(howMany);\n        case \"mph\":\n            return mph2metPerSec(howMany);\n        case \"m/s\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst speedUnits: ISelectChoice[] = [\n    { id: 0, name: \"Ma\" },\n    { id: 1, name: \"ft/s\" },\n    { id: 2, name: \"knot\" },\n    { id: 3, name: \"m/s\" },\n    { id: 4, name: \"km/h\" },\n    { id: 5, name: \"mph\" },\n];\n\nconst speedInfo: string =\n    \"limit: 0-1e15 [m/s], Ma - Mach number - speed of object/speed of sound [1225 km/h]\";\n\nexport { speedInfo, speedUnits, mPerSec2units, units2mPerSec };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\n\nconst KELVINMIN: number = 0; // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst KELVINMAX: number = 1e8;\n\n// https://en.wikipedia.org/wiki/Conversion_of_scales_of_temperature\nfunction k2c(kelvin: number): number {\n    // to celsius\n    return convertIfInRange(kelvin,\n        (k: number): number => k - 273.15,\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2f(kelvin: number): number {\n    // to fahrenheit\n    return convertIfInRange(kelvin,\n        (k: number): number => k * (9 / 5) - 459.67,\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2ra(kelvin: number): number {\n    // to rankine\n    return convertIfInRange(kelvin,\n        (k: number): number => k * (9 / 5),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2d(kelvin: number): number {\n    // to delisle\n    return convertIfInRange(kelvin,\n        (k: number): number => (373.15 - k) * (3 / 2),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2n(kelvin: number): number {\n    // to newton\n    return convertIfInRange(kelvin,\n        (k: number): number => (k - 273.15) * (33 / 100),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2re(kelvin: number): number {\n    // to reaumur\n    return convertIfInRange(kelvin,\n        (k: number): number => (k - 273.15) * (4 / 5),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2ro(kelvin: number): number {\n    // to romer\n    return convertIfInRange(kelvin,\n        (k: number): number => (k - 273.15) * (21 / 40) + 7.5,\n        KELVINMIN, KELVINMAX);\n}\n\nexport { KELVINMIN, KELVINMAX, k2c, k2f, k2ra, k2d, k2n, k2re, k2ro };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst CELSIUSMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst CELSIUSMAX: number = k2c(KELVINMAX);\n\nfunction c2k(celsius: number): number {\n    // to kelvin\n    return convertIfInRange(celsius,\n        (c: number): number => c + 273.15,\n        CELSIUSMIN, CELSIUSMAX);\n}\n\nexport { c2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst DELISLEMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst DELISLEMAX: number = k2c(KELVINMAX);\n\nfunction d2k(delisle: number): number {\n    // to kelvin\n    return convertIfInRange(delisle,\n        (d: number): number => 373.15 - d * (2 / 3),\n        DELISLEMIN, DELISLEMAX);\n}\n\nexport { d2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2f } from \"./kelvin\";\nconst FAHRENHEITMIN: number = k2f(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst FAHRENHEITMAX: number = k2f(KELVINMAX);\n\nfunction f2k(fahrenheit: number): number {\n    // to kelvin\n    return convertIfInRange(fahrenheit,\n        (f: number): number => (f + 459.67) * (5 / 9),\n        FAHRENHEITMIN, FAHRENHEITMAX);\n}\n\nexport { f2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst NEWTONMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst NEWTONMAX: number = k2c(KELVINMAX);\n\nfunction n2k(newton: number): number {\n    // to kelvin\n    return convertIfInRange(newton,\n        (n: number): number => n * (100 / 33) + 273.15,\n        NEWTONMIN, NEWTONMAX);\n}\n\nexport { n2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2ra } from \"./kelvin\";\nconst RANKINEMIN: number = k2ra(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst RANKINEMAX: number = k2ra(KELVINMAX);\n\nfunction ra2k(rankine: number): number {\n    // to kelvin\n    return convertIfInRange(rankine,\n        (ra: number): number => ra * (5 / 9),\n        RANKINEMIN, RANKINEMAX);\n}\n\nexport { ra2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst REAUMURMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst REAUMURMAX: number = k2c(KELVINMAX);\n\nfunction re2k(reaumur: number): number {\n    // to kelvin\n    return convertIfInRange(reaumur,\n        (re: number): number => re * (5 / 4) + 273.15,\n        REAUMURMIN, REAUMURMAX);\n}\n\nexport { re2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst ROMERMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst ROMERMAX: number = k2c(KELVINMAX);\n\nfunction ro2k(romer: number): number {\n    // to kelvin\n    return convertIfInRange(romer,\n        (ro: number): number => (ro - 7.5) * (40 / 21) + 273.15,\n        ROMERMIN, ROMERMAX);\n}\n\nexport { ro2k };\n","import { c2k } from \"./celsius\";\nimport { d2k } from \"./delisle\";\nimport { f2k } from \"./fahrenheit\";\nimport { k2c, k2f, k2ra, k2d, k2n, k2re, k2ro } from \"./kelvin\";\nimport { n2k } from \"./newton\";\nimport { ra2k } from \"./rankine\";\nimport { re2k } from \"./reaumur\";\nimport { ro2k } from \"./romer\";\nimport ISelectChoice from \"../../interfaces/ISelectChoice\";\n\nfunction kelvin2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"celsius\":\n            return k2c(howMany);\n        case \"delisle\":\n            return k2d(howMany);\n        case \"fahrenheit\":\n            return k2f(howMany);\n        case \"newton\":\n            return k2n(howMany);\n        case \"rankine\":\n            return k2ra(howMany);\n        case \"réaumur\":\n            return k2re(howMany);\n        case \"rømer\":\n            return k2ro(howMany);\n        case \"kelvin\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2kelvin(howMany: number, units: string): number {\n    switch (units) {\n        case \"celsius\":\n            return c2k(howMany);\n        case \"delisle\":\n            return d2k(howMany);\n        case \"fahrenheit\":\n            return f2k(howMany);\n        case \"newton\":\n            return n2k(howMany);\n        case \"rankine\":\n            return ra2k(howMany);\n        case \"réaumur\":\n            return re2k(howMany);\n        case \"rømer\":\n            return ro2k(howMany);\n        case \"kelvin\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst temperatureUnits: ISelectChoice[] = [\n    { id: 0, name: \"celsius\" },\n    { id: 1, name: \"delisle\" },\n    { id: 2, name: \"fahrenheit\" },\n    { id: 3, name: \"kelvin\" },\n    { id: 4, name: \"newton\" },\n    { id: 5, name: \"rankine\" },\n    { id: 6, name: \"réaumur\" },\n    { id: 7, name: \"rømer\" },\n];\n\nconst temperatureInfo: string = \"limit: 0-1e8 [kelvin], limit in Physics: 0-Math.pow(10,32) [kelvin]\";\n\nexport { kelvin2units, units2kelvin, temperatureUnits, temperatureInfo };\n","import {\n    turns2units,\n    units2turns,\n    angleUnits,\n    angleInfo,\n} from \"../convertionTypes/angle/converter\";\n\nimport {\n    metreSq2units,\n    units2metreSq,\n    areaUnits,\n    areaInfo,\n} from \"../convertionTypes/area/converter\";\n\nimport {\n    kg2units,\n    units2kg,\n    massInfo,\n    massUnits,\n} from \"../convertionTypes/mass/converter\";\n\nimport {\n    metre2units,\n    units2metre,\n    lengthInfo,\n    lengthUnits,\n} from \"../convertionTypes/length/converter\";\n\nimport {\n    pascal2units,\n    units2pascal,\n    pressureInfo,\n    pressureUnits,\n} from \"../convertionTypes/pressure/converter\";\n\nimport {\n    mPerSec2units,\n    units2mPerSec,\n    speedUnits,\n    speedInfo,\n} from \"../convertionTypes/speed/converter\";\n\nimport {\n    kelvin2units,\n    units2kelvin,\n    temperatureUnits,\n    temperatureInfo,\n} from \"../convertionTypes/temperature/converter\";\n\nconst config = {\n    angle: {\n        units: angleUnits,\n        main2secondary: turns2units,\n        secondary2main: units2turns,\n        additionalInfo: angleInfo,\n    },\n    area: {\n        units: areaUnits,\n        main2secondary: metreSq2units,\n        secondary2main: units2metreSq,\n        additionalInfo: areaInfo,\n    },\n    mass: {\n        units: massUnits,\n        main2secondary: kg2units,\n        secondary2main: units2kg,\n        additionalInfo: massInfo,\n    },\n    length: {\n        units: lengthUnits,\n        main2secondary: metre2units,\n        secondary2main: units2metre,\n        additionalInfo: lengthInfo,\n    },\n    pressure: {\n        units: pressureUnits,\n        main2secondary: pascal2units,\n        secondary2main: units2pascal,\n        additionalInfo: pressureInfo,\n    },\n    speed: {\n        units: speedUnits,\n        main2secondary: mPerSec2units,\n        secondary2main: units2mPerSec,\n        additionalInfo: speedInfo,\n    },\n    temperature: {\n        units: temperatureUnits,\n        main2secondary: kelvin2units,\n        secondary2main: units2kelvin,\n        additionalInfo: temperatureInfo,\n    },\n};\n\nexport default config;\n","import Angle from \"./Angle\";\nimport ISelectChoice from \"../../interfaces/ISelectChoice\";\n\nfunction turns2units(howMany: number, units: string): number {\n    let angle: Angle = new Angle(howMany);\n    return angle.getAngleInUnits(units);\n}\n\nfunction units2turns(howMany: number, units: string): number {\n    let angle: Angle = new Angle(0);\n    angle.setAngleInUnits(howMany, units);\n    return angle.getAngleInUnits(\"turn\");\n}\n\nconst angleUnits: ISelectChoice[] = [\n    { id: 0, name: \"degree\" },\n    { id: 1, name: \"gradian\" },\n    { id: 2, name: \"mil\" },\n    { id: 3, name: \"radian\" },\n    { id: 4, name: \"turn\" },\n];\n\nconst angleInfo: string = \"limit: 0-1 [turn], both sides (-/+), angles wrap around 1 [turn]\";\n\nexport { turns2units, units2turns, angleUnits, angleInfo };\n","import React, { ReactElement, useEffect, useState } from \"react\";\n\nimport Converter from \"./convertionTypes/Converter\";\nimport config from \"./config/config\";\nimport getOption from \"./utils/getOption\";\nimport ISelectChoice from \"./interfaces/ISelectChoice\";\n\nimport \"./App.css\";\n\nconst App: React.FC = (): ReactElement<HTMLElement> => {\n    const getConvertionChoices = (config: Object): ISelectChoice[] => {\n        let result: ISelectChoice[] = [];\n        let keys: string[] = Object.keys(config);\n        for (let i = 0; i < keys.length; i++) {\n            result.push({ id: i, name: keys[i] });\n        }\n        return result;\n    };\n    const convertions: ISelectChoice[] = getConvertionChoices(config);\n    const [convChoice, setConvChoice]: [string, Function] = useState(\n        convertions[0].name\n    );\n\n    const handleConvertionChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ): void => {\n        setConvChoice(event.target.value);\n    };\n\n    useEffect(() => {\n        setConvChoice(\"angle\");\n        document.title = \"Simple Units Converter\";\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <h1>Simple Units Converter</h1>\n            <p className=\"warning\">NO GUARANTEE OF CORRECT CONVERSION. USE IT AT YOUR OWN RISK</p>\n            <p>(Still, I hope it will work fine. Some rounding errors are possible)</p>\n            <hr />\n            <p>Select conversion type:</p>\n            <select value={convChoice} onChange={handleConvertionChange}>\n                {convertions.map((convertion) => getOption(convertion))}\n            </select>\n            <br /> <br />\n            <Converter\n                units={config[convChoice as keyof typeof config].units}\n                main2secondary={\n                    config[convChoice as keyof typeof config].main2secondary\n                }\n                secondary2main={\n                    config[convChoice as keyof typeof config].secondary2main\n                }\n                additionalInfo={\n                    config[convChoice as keyof typeof config].additionalInfo\n                }\n            />\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}