{"version":3,"sources":["utils/getOption.tsx","convertionTypes/Converter.tsx","convertionTypes/angle/convertingFns/Angle.ts","convertionTypes/angle/convertingFns/gradian.ts","convertionTypes/angle/convertingFns/mil.ts","convertionTypes/angle/convertingFns/radian.ts","convertionTypes/angle/convertingFns/degree.ts","convertionTypes/angle/convertingFns/turns.ts","convertionTypes/temperature/convertingFns/isOutOfRange.ts","convertionTypes/temperature/convertingFns/convertIfInRange.ts","convertionTypes/temperature/convertingFns/kelvin.ts","convertionTypes/temperature/convertingFns/celsius.ts","convertionTypes/temperature/convertingFns/delisle.ts","convertionTypes/temperature/convertingFns/fahrenheit.ts","convertionTypes/temperature/convertingFns/newton.ts","convertionTypes/temperature/convertingFns/rankine.ts","convertionTypes/temperature/convertingFns/reaumur.ts","convertionTypes/temperature/convertingFns/romer.ts","convertionTypes/temperature/convertingFns/converter.ts","config/config.ts","convertionTypes/angle/convertingFns/converter.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getOption","unit","value","id","Converter","props","units","main2secondary","secondary2main","additionalInfo","useState","input","setInput","inUnits","setInUnits","howManyMainUnits","setHowManyMainUnits","useEffect","parseFloat","pattern","placeholder","name","type","onChange","event","target","map","u","toFixed","Angle","turns","_turns","_negative","this","_setInternals","Math","abs","angle","PI","_getTurns","t2m","t2r","t2d","NaN","isOutOfRange","someNum","lowExcl","highExcl","convertIfInRange","kelvin","converter","minIncl","maxIncl","KELVINMAX","k2c","k","k2f","k2ra","CELSIUSMIN","CELSIUSMAX","DELISLEMIN","DELISLEMAX","FAHRENHEITMIN","FAHRENHEITMAX","NEWTONMIN","NEWTONMAX","RANKINEMIN","RANKINEMAX","REAUMURMIN","REAUMURMAX","ROMERMIN","ROMERMAX","config","howMany","getAngleInUnits","setAngleInUnits","temperature","k2n","k2re","k2ro","c","d","f","n","ra","re","ro","App","convertions","result","keys","Object","i","length","push","getConvertionChoices","convChoice","setConvChoice","className","convertion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAeeA,EARG,SAACC,GACf,OACI,wBAAsBC,MAAOD,EAAKA,KAAlC,SACKA,EAAKA,MADGA,EAAKE,KCuEXC,G,MAhEoB,SAACC,GAEhC,IAAMC,EAAuBD,EAAMC,MAC7BC,EAA2BF,EAAME,eACjCC,EAA2BH,EAAMG,eACjCC,EAAyBJ,EAAMI,eAErC,EAA0BC,mBAAS,KAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAASJ,EAAM,GAAGL,MAAhD,mBAAOY,EAAP,KAAgBC,EAAhB,KACA,EAAgDJ,mBAAS,GAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KAUAC,qBAAU,WAEFD,EAAoBR,EAAeU,WAAWP,GAAQE,MAG3D,CAACE,EAAkBP,EAAgBG,EAAOE,IAE7CI,qBAAU,WAEFL,EAAS,KACTI,EAAoB,GACpBF,EAAWR,EAAM,GAAGL,QAGzB,CAACK,IAWJ,OACI,gCACI,uBACA,uFACA,uBACIa,QAAQ,mCACRC,YAAY,OACZC,KAAK,GAAGC,KAAK,OAAOpB,MAAOS,EAAOY,SAxCzB,SAACC,GAClBZ,EAASY,EAAMC,OAAOvB,UAwClB,gGACA,oDACA,wBAAQA,MAAOW,EAASU,SAvCX,SAACC,GAClBV,EAAWU,EAAMC,OAAOvB,QAsCpB,SACKI,EAAMoB,KAAI,SAACzB,GAAD,OAAUD,EAAUC,QAEnC,4BAAIQ,IACJ,sCACA,8BAAMH,EAAMoB,KAAI,SAACC,GAAD,OAxBL1B,EAwBsB0B,EAtBjC,8BACK,IACApB,EAAeQ,EAAkBd,EAAKA,MAAM2B,QAAQ,GAFzD,KAE+D3B,EAAKA,KAFpE,MAAQA,EAAKE,IAFH,IAACF,Y,kBC7CjB4B,E,WAIF,aAAgC,IAApBC,EAAmB,uDAAH,EAAG,yBAHvBC,OAAiB,EAGM,KAFvBC,WAAqB,EAGzBC,KAAKC,cAAcJ,G,iDAGvB,WAAgD,IAA1BA,EAAyB,uDAAT,GAClCA,EAASK,KAAKC,IAAIN,GAAS,EAAMA,EAAQ,EAAKA,GAClC,GACRG,KAAKF,OAAS,EAAID,EAClBG,KAAKD,WAAY,IAEjBC,KAAKF,OAASD,EACdG,KAAKD,WAAY,K,uBAIzB,WACI,OAAOC,KAAKD,UAAa,EAAIC,KAAKF,OAAUE,KAAKF,S,6BAGrD,SAAuBM,EAAe/B,GACpB,YAAVA,EACA2B,KAAKC,cAAkBG,EC9BA,KD+BN,QAAV/B,EACP2B,KAAKC,cAAkBG,EEhCJ,MFiCF,WAAV/B,EACP2B,KAAKC,cAAkBG,GGlCA,EAAIF,KAAKG,KHmCf,WAAVhC,EACP2B,KAAKC,cAAkBG,EIpCD,KJqCL,SAAV/B,GACP2B,KAAKC,cAAcG,K,6BAI3B,SAAuB/B,GACnB,MAAc,YAAVA,EKtCuB,ILuCZ2B,KAAKM,YACC,QAAVjC,EKpCnB,SAAawB,GAET,OAD2B,KAARA,ELoCJU,CAAIP,KAAKM,aACC,WAAVjC,EKjCnB,SAAawB,GAET,OADsBA,GAAS,EAAIK,KAAKG,ILiCzBG,CAAIR,KAAKM,aACC,WAAVjC,EKlDnB,SAAawB,GAET,OAD8B,IAARA,ELkDPY,CAAIT,KAAKM,aACC,SAAVjC,EACA2B,KAAKM,YAELI,Q,KAKJd,IMnDAe,MATf,SAAsBC,EAClBC,EAAiBC,GACjB,OAAIF,EAAUC,GAAWD,EAAUE,GCAvC,SAASC,EAAiBC,EACtBC,EACAC,EACAC,GACA,OAAIR,EAAaK,EAAQE,EAASC,GACvBT,IAEAO,EAAUD,GCPzB,IAGMI,EAAoB,IAG1B,SAASC,EAAIL,GAET,OAAOD,EAAiBC,GACpB,SAACM,GAAD,OAAuBA,EAAI,SATT,EAUPF,GAGnB,SAASG,EAAIP,GAET,OAAOD,EAAiBC,GACpB,SAACM,GAAD,OAAwB,IAADA,EAAc,SAhBnB,EAiBPF,GAGnB,SAASI,EAAKR,GAEV,OAAOD,EAAiBC,GACpB,SAACM,GAAD,OAAwB,IAADA,IAvBL,EAwBPF,GCvBnB,IAAMK,EAAqBJ,EDDD,GCIpBK,EAAqBL,EAAID,GCH/B,IAAMO,EAAqBN,EFDD,GEIpBO,EAAqBP,EAAID,GCJ/B,IAAMS,EAAwBN,EHAJ,GGGpBO,EAAwBP,EAAIH,GCFlC,IAAMW,EAAoBV,EJDA,GIIpBW,EAAoBX,EAAID,GCJ9B,IAAMa,EAAqBT,ELAD,GKGpBU,EAAqBV,EAAKJ,GCFhC,IAAMe,EAAqBd,ENDD,GMIpBe,EAAqBf,EAAID,GCH/B,IAAMiB,EAAmBhB,EPDC,GOIpBiB,EAAmBjB,EAAID,GCsD7B,IChCemB,EAfA,CACXnC,MAAO,CACH/B,MCG0B,CAC9B,CAAEH,GAAI,EAAGF,KAAM,UACf,CAAEE,GAAI,EAAGF,KAAM,WACf,CAAEE,GAAI,EAAGF,KAAM,OACf,CAAEE,GAAI,EAAGF,KAAM,UACf,CAAEE,GAAI,EAAGF,KAAM,SDPXM,eCTR,SAAqBkE,EAAiBnE,GAElC,OADmB,IAAIuB,EAAM4C,GAChBC,gBAAgBpE,IDQzBE,eCLR,SAAqBiE,EAAiBnE,GAClC,IAAI+B,EAAe,IAAIR,EAAM,GAE7B,OADAQ,EAAMsC,gBAAgBF,EAASnE,GACxB+B,EAAMqC,gBAAgB,SDGzBjE,eCQkB,kDDNtBmE,YAAa,CACTtE,MDuCgC,CACpC,CAAEH,GAAI,EAAGF,KAAM,WACf,CAAEE,GAAI,EAAGF,KAAM,WACf,CAAEE,GAAI,EAAGF,KAAM,cACf,CAAEE,GAAI,EAAGF,KAAM,UACf,CAAEE,GAAI,EAAGF,KAAM,UACf,CAAEE,GAAI,EAAGF,KAAM,WACf,CAAEE,GAAI,EAAGF,KAAM,WACf,CAAEE,GAAI,EAAGF,KAAM,UC9CXM,eDRR,SAAsBkE,EAAiBnE,GACnC,OAAQA,GACJ,IAAK,UACD,OAAOgD,EAAImB,GACf,IAAK,UACD,ORYDzB,EQZYyB,GRaf,SAAClB,GAAD,OAAuB,KAAC,OAASA,KA9Bf,EA+BPF,GQbX,IAAK,aACD,OAAOG,EAAIiB,GACf,IAAK,SACD,ORaZ,SAAaxB,GAET,OAAOD,EAAiBC,GACpB,SAACM,GAAD,MAAuB,KAACA,EAAI,UArCV,EAsCPF,GQjBAwB,CAAIJ,GACf,IAAK,UACD,OAAOhB,EAAKgB,GAChB,IAAK,UACD,ORgBZ,SAAcxB,GAEV,OAAOD,EAAiBC,GACpB,SAACM,GAAD,MAAuB,IAACA,EAAI,UA5CV,EA6CPF,GQpBAyB,CAAKL,GAChB,IAAK,QACD,ORqBZ,SAAcxB,GAEV,OAAOD,EAAiBC,GACpB,SAACM,GAAD,MAAuB,MAACA,EAAI,QAAsB,MAnDhC,EAoDPF,GQzBA0B,CAAKN,GAChB,IAAK,SACD,OAAOA,EACX,QACI,OAAO9B,MCVXnC,eDcR,SAAsBiE,EAAiBnE,GACnC,OAAQA,GACJ,IAAK,UACD,OP9BD0C,EO8BYyB,GP7Bf,SAACO,GAAD,OAAuBA,EAAI,SAC3BtB,EAAYC,GO6BZ,IAAK,UACD,ONhCDX,EMgCYyB,GN/Bf,SAACQ,GAAD,OAAuB,OAASA,GAAK,EAAI,KACzCrB,EAAYC,GM+BZ,IAAK,aACD,OLnCDb,EKmCYyB,GLlCf,SAACS,GAAD,OAAwBA,EAAI,SAAW,EAAI,KAC3CpB,EAAeC,GKkCf,IAAK,SACD,OJpCDf,EIoCYyB,GJnCf,SAACU,GAAD,OAAuBA,GAAK,IAAM,IAAM,SACxCnB,EAAWC,GImCX,IAAK,UACD,OHvCDjB,EGuCayB,GHtChB,SAACW,GAAD,OAAwBA,GAAM,EAAI,KAClClB,EAAYC,GGsCZ,IAAK,UACD,OFxCDnB,EEwCayB,GFvChB,SAACY,GAAD,OAAwBA,GAAM,EAAI,GAAK,SACvCjB,EAAYC,GEuCZ,IAAK,QACD,OD1CDrB,EC0CayB,GDzChB,SAACa,GAAD,OAAsC,GAAK,IAAlBA,EAAK,KAAmB,SACjDhB,EAAUC,GCyCV,IAAK,SACD,OAAOE,EACX,QACI,OAAO9B,MChCXlC,eD+CwB,0BGpBjB8E,EAxCO,WAClB,IAQMC,EARuB,SAAChB,GAG1B,IAFA,IAAIiB,EAAwB,GACxBC,EAAiBC,OAAOD,KAAKlB,GACxBoB,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC7BH,EAAOK,KAAK,CAAE3F,GAAIyF,EAAG3F,KAAMyF,EAAKE,KAEpC,OAAOH,EAEwBM,CAAqBvB,GACxD,EAAwD9D,mBAAS8E,EAAY,GAAGvF,MAAhF,mBAAO+F,EAAP,KAAmBC,EAAnB,KAQA,OACI,sBAAKC,UAAU,MAAf,UACI,kDACA,mBAAGA,UAAU,UAAb,gDACA,mBAAGA,UAAU,UAAb,qCACA,+DACA,uBACA,wDACA,wBAAQhG,MAAO8F,EAAYzE,SAdJ,SAC3BC,GAEAyE,EAAczE,EAAMC,OAAOvB,QAWvB,SACKsF,EAAY9D,KAAI,SAACyE,GAAD,OAAgBnG,EAAUmG,QAE/C,uBAVJ,IAUW,uBACP,cAAC,EAAD,CACI7F,MAAOkE,EAAOwB,GAAmC1F,MACjDC,eAAgBiE,EAAOwB,GAAmCzF,eAC1DC,eAAgBgE,EAAOwB,GAAmCxF,eAC1DC,eAAgB+D,EAAOwB,GAAmCvF,qBC/B3D2F,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b813d595.chunk.js","sourcesContent":["import { ReactElement } from \"react\";\n\ninterface unitsChoice {\n    id: number;\n    unit: string;\n}\n\nconst getOption = (unit: unitsChoice): ReactElement<HTMLElement> => {\n    return (\n        <option key={unit.id} value={unit.unit}>\n            {unit.unit}\n        </option>\n    );\n};\n\nexport default getOption;\n","import React, { ReactElement, useEffect, useState } from \"react\";\nimport getOption from \"../utils/getOption\";\nimport \"./Converter.css\"\n\ninterface unitsChoice {\n    id: number;\n    unit: string;\n}\n\ninterface Props {\n    units: unitsChoice[],\n    main2secondary: Function,\n    secondary2main: Function,\n    additionalInfo: string,\n}\n\nconst Converter: React.FC<Props> = (props): ReactElement<HTMLElement> => {\n\n    const units: unitsChoice[] = props.units;\n    const main2secondary: Function = props.main2secondary;\n    const secondary2main: Function = props.secondary2main;\n    const additionalInfo: string = props.additionalInfo;\n\n    const [input, setInput] = useState(\"0\");\n    const [inUnits, setInUnits] = useState(units[0].unit);\n    const [howManyMainUnits, setHowManyMainUnits] = useState(0);\n\n    const handleTyping = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        setInput(event.target.value);\n    };\n\n    const handleOption = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n        setInUnits(event.target.value);\n    };\n\n    useEffect(() => {\n        const handleConversion = (): void => {\n            setHowManyMainUnits(secondary2main(parseFloat(input), inUnits));\n        };\n        handleConversion();\n    }, [howManyMainUnits, secondary2main, input, inUnits]);\n\n    useEffect(() => {\n        const setDefaults = (): void => {\n            setInput(\"0\");\n            setHowManyMainUnits(0);\n            setInUnits(units[0].unit);\n        }\n        setDefaults();\n    }, [units])\n\n    const getOutput = (unit: unitsChoice): ReactElement<HTMLElement> => {\n        return (\n            <p key={unit.id}>\n                {\" \"}\n                {main2secondary(howManyMainUnits, unit.unit).toFixed(4)} [{unit.unit}]\n            </p>\n        );\n    };\n\n    return (\n        <div>\n            <hr />\n            <p>Type some number (allowed chars: digits, period, -, +)</p>\n            <input\n                pattern=\"[-+]{0,1}[0-9]+\\.{0,1}[0-9]{0,}\"\n                placeholder=\"0.00\"\n                name=\"\" type=\"text\" value={input} onChange={handleTyping} />\n            <p>(red border: incorrect input that may produce incorrect output)</p>\n            <p>Choose input units:</p>\n            <select value={inUnits} onChange={handleOption}>\n                {units.map((unit) => getOption(unit))}\n            </select>\n            <p>{additionalInfo}</p>\n            <h2>&#187;</h2>\n            <div>{units.map((u) => getOutput(u))}</div>\n        </div>\n    );\n};\n\nexport default Converter;\n","import { d2t } from \"./degree\";\nimport { g2t } from \"./gradian\";\nimport { m2t } from \"./mil\";\nimport { r2t } from \"./radian\";\nimport { t2d, t2g, t2m, t2r } from \"./turns\";\n\nclass Angle {\n    private _turns: number = 0;\n    private _negative: boolean = false;\n\n    constructor(turns: number = 0) {\n        this._setInternals(turns);\n    }\n\n    private _setInternals(turns: number = 0): void {\n        turns = (Math.abs(turns) > 1) ? (turns % 1) : turns;\n        if (turns < 0) {\n            this._turns = 1 - turns;\n            this._negative = true;\n        } else {\n            this._turns = turns;\n            this._negative = false;\n        }\n    }\n\n    private _getTurns(): number {\n        return this._negative ? (1 - this._turns) : this._turns;\n    }\n\n    public setAngleInUnits(angle: number, units: string): void {\n        if (units === \"gradian\") {\n            this._setInternals(g2t(angle));\n        } else if (units === \"mil\") {\n            this._setInternals(m2t(angle));\n        } else if (units === \"radian\") {\n            this._setInternals(r2t(angle));\n        } else if (units === \"degree\") {\n            this._setInternals(d2t(angle));\n        } else if (units === \"turn\") {\n            this._setInternals(angle);\n        }\n    }\n\n    public getAngleInUnits(units: string): number {\n        if (units === \"gradian\") {\n            return t2g(this._getTurns());\n        } else if (units === \"mil\") {\n            return t2m(this._getTurns());\n        } else if (units === \"radian\") {\n            return t2r(this._getTurns());\n        } else if (units === \"degree\") {\n            return t2d(this._getTurns());\n        } else if (units === \"turn\") {\n            return this._getTurns();\n        } else {\n            return NaN;\n        }\n    }\n}\n\nexport default Angle;\n","function g2t(gradians: number): number {\n    let turns: number = gradians / 400;\n    return turns;\n}\n\nexport { g2t };\n","function m2t(mils: number): number {\n    let turns: number = mils / 6400;\n    return turns;\n}\n\nexport { m2t };\n","function r2t(radians: number): number {\n    let turns: number = radians / (2 * Math.PI);\n    return turns;\n}\n\nexport { r2t };\n","function d2t(degrees: number): number {\n    let turns: number = degrees / 360;\n    return turns;\n}\n\nexport { d2t };\n","function t2d(turns: number): number {\n    let degrees: number = turns * 360;\n    return degrees;\n}\n\nfunction t2g(turns: number): number {\n    let gradians: number = turns * 400;\n    return gradians;\n}\n\nfunction t2m(turns: number): number {\n    let mils: number = turns * 6400;\n    return mils;\n}\n\nfunction t2r(turns: number): number {\n    let radians: number = turns * (2 * Math.PI);\n    return radians;\n}\n\nexport { t2d, t2g, t2m, t2r };\n","function isOutOfRange(someNum: number,\n    lowExcl: number, highExcl: number): boolean {\n    if (someNum < lowExcl || someNum > highExcl) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport default isOutOfRange;\n","import isOutOfRange from \"./isOutOfRange\";\n\nfunction convertIfInRange(kelvin: number,\n    converter: Function,\n    minIncl: number,\n    maxIncl: number): number {\n    if (isOutOfRange(kelvin, minIncl, maxIncl)) {\n        return NaN;\n    } else {\n        return converter(kelvin);\n    }\n}\n\nexport { convertIfInRange };\n","import { convertIfInRange } from \"./convertIfInRange\";\n\nconst KELVINMIN: number = 0; // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst KELVINMAX: number = 1e8;\n\n// https://en.wikipedia.org/wiki/Conversion_of_scales_of_temperature\nfunction k2c(kelvin: number): number {\n    // to celsius\n    return convertIfInRange(kelvin,\n        (k: number): number => k - 273.15,\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2f(kelvin: number): number {\n    // to fahrenheit\n    return convertIfInRange(kelvin,\n        (k: number): number => k * (9 / 5) - 459.67,\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2ra(kelvin: number): number {\n    // to rankine\n    return convertIfInRange(kelvin,\n        (k: number): number => k * (9 / 5),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2d(kelvin: number): number {\n    // to delisle\n    return convertIfInRange(kelvin,\n        (k: number): number => (373.15 - k) * (3 / 2),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2n(kelvin: number): number {\n    // to newton\n    return convertIfInRange(kelvin,\n        (k: number): number => (k - 273.15) * (33 / 100),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2re(kelvin: number): number {\n    // to reaumur\n    return convertIfInRange(kelvin,\n        (k: number): number => (k - 273.15) * (4 / 5),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2ro(kelvin: number): number {\n    // to romer\n    return convertIfInRange(kelvin,\n        (k: number): number => (k - 273.15) * (21 / 40) + 7.5,\n        KELVINMIN, KELVINMAX);\n}\n\nexport { KELVINMIN, KELVINMAX, k2c, k2f, k2ra, k2d, k2n, k2re, k2ro };\n","import { convertIfInRange } from \"./convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst CELSIUSMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst CELSIUSMAX: number = k2c(KELVINMAX);\n\nfunction c2k(celsius: number): number {\n    // to kelvin\n    return convertIfInRange(celsius,\n        (c: number): number => c + 273.15,\n        CELSIUSMIN, CELSIUSMAX);\n}\n\nexport { c2k };\n","import { convertIfInRange } from \"./convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst DELISLEMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst DELISLEMAX: number = k2c(KELVINMAX);\n\nfunction d2k(delisle: number): number {\n    // to kelvin\n    return convertIfInRange(delisle,\n        (d: number): number => 373.15 - d * (2 / 3),\n        DELISLEMIN, DELISLEMAX);\n}\n\nexport { d2k };\n","import { convertIfInRange } from \"./convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2f } from \"./kelvin\";\nconst FAHRENHEITMIN: number = k2f(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst FAHRENHEITMAX: number = k2f(KELVINMAX);\n\nfunction f2k(fahrenheit: number): number {\n    // to kelvin\n    return convertIfInRange(fahrenheit,\n        (f: number): number => (f + 459.67) * (5 / 9),\n        FAHRENHEITMIN, FAHRENHEITMAX);\n}\n\nexport { f2k };\n","import { convertIfInRange } from \"./convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst NEWTONMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst NEWTONMAX: number = k2c(KELVINMAX);\n\nfunction n2k(newton: number): number {\n    // to kelvin\n    return convertIfInRange(newton,\n        (n: number): number => n * (100 / 33) + 273.15,\n        NEWTONMIN, NEWTONMAX);\n}\n\nexport { n2k };\n","import { convertIfInRange } from \"./convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2ra } from \"./kelvin\";\nconst RANKINEMIN: number = k2ra(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst RANKINEMAX: number = k2ra(KELVINMAX);\n\nfunction ra2k(rankine: number): number {\n    // to kelvin\n    return convertIfInRange(rankine,\n        (ra: number): number => ra * (5 / 9),\n        RANKINEMIN, RANKINEMAX);\n}\n\nexport { ra2k };\n","import { convertIfInRange } from \"./convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst REAUMURMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst REAUMURMAX: number = k2c(KELVINMAX);\n\nfunction re2k(reaumur: number): number {\n    // to kelvin\n    return convertIfInRange(reaumur,\n        (re: number): number => re * (5 / 4) + 273.15,\n        REAUMURMIN, REAUMURMAX);\n}\n\nexport { re2k };\n","import { convertIfInRange } from \"./convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst ROMERMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst ROMERMAX: number = k2c(KELVINMAX);\n\nfunction ro2k(romer: number): number {\n    // to kelvin\n    return convertIfInRange(romer,\n        (ro: number): number => (ro - 7.5) * (40 / 21) + 273.15,\n        ROMERMIN, ROMERMAX);\n}\n\nexport { ro2k };\n","import { c2k } from \"./celsius\";\nimport { d2k } from \"./delisle\";\nimport { f2k } from \"./fahrenheit\";\nimport { k2c, k2f, k2ra, k2d, k2n, k2re, k2ro } from \"./kelvin\";\nimport { n2k } from \"./newton\";\nimport { ra2k } from \"./rankine\";\nimport { re2k } from \"./reaumur\";\nimport { ro2k } from \"./romer\";\n\ninterface unitsChoice {\n    id: number;\n    unit: string;\n}\n\nfunction kelvin2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"celsius\":\n            return k2c(howMany);\n        case \"delisle\":\n            return k2d(howMany);\n        case \"fahrenheit\":\n            return k2f(howMany);\n        case \"newton\":\n            return k2n(howMany);\n        case \"rankine\":\n            return k2ra(howMany);\n        case \"reaumur\":\n            return k2re(howMany);\n        case \"romer\":\n            return k2ro(howMany);\n        case \"kelvin\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2kelvin(howMany: number, units: string): number {\n    switch (units) {\n        case \"celsius\":\n            return c2k(howMany);\n        case \"delisle\":\n            return d2k(howMany);\n        case \"fahrenheit\":\n            return f2k(howMany);\n        case \"newton\":\n            return n2k(howMany);\n        case \"rankine\":\n            return ra2k(howMany);\n        case \"reaumur\":\n            return re2k(howMany);\n        case \"romer\":\n            return ro2k(howMany);\n        case \"kelvin\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst temperatureUnits: unitsChoice[] = [\n    { id: 0, unit: \"celsius\" },\n    { id: 1, unit: \"delisle\" },\n    { id: 2, unit: \"fahrenheit\" },\n    { id: 3, unit: \"kelvin\" },\n    { id: 4, unit: \"newton\" },\n    { id: 5, unit: \"rankine\" },\n    { id: 6, unit: \"reaumur\" },\n    { id: 7, unit: \"romer\" },\n]\n\nconst temperatureInfo: string = \"limit: 0-1e8 [kelvin]\";\n\nexport { kelvin2units, units2kelvin, temperatureUnits, temperatureInfo };\n","import {\n    turns2units,\n    units2turns,\n    angleUnits,\n    angleInfo,\n} from \"../convertionTypes/angle/convertingFns/converter\";\nimport {\n    kelvin2units,\n    units2kelvin,\n    temperatureUnits,\n    temperatureInfo,\n} from \"../convertionTypes/temperature/convertingFns/converter\";\n\nconst config = {\n    angle: {\n        units: angleUnits,\n        main2secondary: turns2units,\n        secondary2main: units2turns,\n        additionalInfo: angleInfo,\n    },\n    temperature: {\n        units: temperatureUnits,\n        main2secondary: kelvin2units,\n        secondary2main: units2kelvin,\n        additionalInfo: temperatureInfo,\n    },\n};\n\nexport default config;\n","import Angle from \"./Angle\";\n\ninterface unitsChoice {\n    id: number;\n    unit: string;\n}\n\nfunction turns2units(howMany: number, units: string): number {\n    let angle: Angle = new Angle(howMany);\n    return angle.getAngleInUnits(units);\n}\n\nfunction units2turns(howMany: number, units: string): number {\n    let angle: Angle = new Angle(0);\n    angle.setAngleInUnits(howMany, units);\n    return angle.getAngleInUnits(\"turn\");\n}\n\nconst angleUnits: unitsChoice[] = [\n    { id: 0, unit: \"degree\" },\n    { id: 1, unit: \"gradian\" },\n    { id: 2, unit: \"mil\" },\n    { id: 3, unit: \"radian\" },\n    { id: 4, unit: \"turn\" },\n]\n\nconst angleInfo: string = \"limit: 0-1 [turn], both sides (-/+), rounds up\";\n\nexport { turns2units, units2turns, angleUnits, angleInfo };\n","import React, { ReactElement, useState } from \"react\";\nimport \"./App.css\";\nimport Converter from \"./convertionTypes/Converter\";\nimport config from \"./config/config\";\nimport getOption from \"./utils/getOption\";\n\ninterface unitsChoice {\n    id: number;\n    unit: string;\n}\n\nconst App: React.FC = (): ReactElement<HTMLElement> => {\n    const getConvertionChoices = (config: Object): unitsChoice[] => {\n        let result: unitsChoice[] = [];\n        let keys: string[] = Object.keys(config);\n        for (let i = 0; i < keys.length; i++) {\n            result.push({ id: i, unit: keys[i] });\n        }\n        return result;\n    };\n    const convertions: unitsChoice[] = getConvertionChoices(config);\n    const [convChoice, setConvChoice]: [string, Function] = useState(convertions[0].unit);\n\n    const handleConvertionChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ): void => {\n        setConvChoice(event.target.value);\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Simple Converter</h1>\n            <p className=\"warning\">No guarantee of correct conversion</p>\n            <p className=\"warning\">Use it at your own risk</p>\n            <p>(Although it should work fine)</p>\n            <hr />\n            <p>Select conversion type:</p>\n            <select value={convChoice} onChange={handleConvertionChange}>\n                {convertions.map((convertion) => getOption(convertion))}\n            </select>\n            <br /> <br />\n            <Converter\n                units={config[convChoice as keyof typeof config].units}\n                main2secondary={config[convChoice as keyof typeof config].main2secondary}\n                secondary2main={config[convChoice as keyof typeof config].secondary2main}\n                additionalInfo={config[convChoice as keyof typeof config].additionalInfo}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}