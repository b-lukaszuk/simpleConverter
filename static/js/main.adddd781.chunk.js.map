{"version":3,"sources":["utils/getOption.tsx","utils/format.ts","convertionTypes/Converter.tsx","convertionTypes/angle/Angle.ts","convertionTypes/angle/gradian.ts","convertionTypes/angle/mil.ts","convertionTypes/angle/radian.ts","convertionTypes/angle/degree.ts","convertionTypes/angle/turns.ts","utils/isOutOfRange.ts","utils/convertIfInRange.ts","convertionTypes/mass/kg.ts","convertionTypes/mass/g.ts","convertionTypes/mass/mg.ts","convertionTypes/mass/ounce.ts","convertionTypes/mass/pound.ts","convertionTypes/mass/tonne.ts","convertionTypes/mass/converter.ts","convertionTypes/length/metre.ts","convertionTypes/length/cm.ts","convertionTypes/length/foot.ts","convertionTypes/length/inch.ts","convertionTypes/length/km.ts","convertionTypes/length/landMile.ts","convertionTypes/length/league.ts","convertionTypes/length/mm.ts","convertionTypes/length/seaMile.ts","convertionTypes/length/yard.ts","convertionTypes/length/converter.ts","convertionTypes/pressure/pascal.ts","convertionTypes/pressure/atm.ts","convertionTypes/pressure/bar.ts","convertionTypes/pressure/psi.ts","convertionTypes/pressure/torr.ts","convertionTypes/pressure/converter.ts","convertionTypes/temperature/kelvin.ts","convertionTypes/temperature/celsius.ts","convertionTypes/temperature/delisle.ts","convertionTypes/temperature/fahrenheit.ts","convertionTypes/temperature/newton.ts","convertionTypes/temperature/rankine.ts","convertionTypes/temperature/reaumur.ts","convertionTypes/temperature/romer.ts","convertionTypes/temperature/converter.ts","config/config.ts","convertionTypes/angle/converter.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getOption","unit","value","name","id","groupByNChars","text","nChar","sepChar","result","moduloOfLen","length","push","slice","i","join","formatNum","someNum","round","isNaN","results","Math","abs","toFixed","split","Converter","props","units","main2secondary","secondary2main","additionalInfo","useState","input","setInput","inUnits","setInUnits","howManyMainUnits","setHowManyMainUnits","useEffect","parseFloat","pattern","placeholder","maxLength","type","onChange","event","target","map","u","Angle","turns","_turns","_negative","this","_setInternals","angle","PI","_getTurns","t2m","t2r","t2d","NaN","isOutOfRange","lowExcl","highExcl","convertIfInRange","converter","minIncl","maxIncl","KGMAX","kg2g","kg","k","kg2mg","kg2ounce","kg2pound","kg2tonne","GMIN","GMAX","MGMIN","MGMAX","OUNCEMIN","OUNCEMAX","POUNDMIN","POUNDMAX","TONNEMIN","TONNEMAX","METREMAX","metre2cm","metre","m","metre2foot","metre2inch","metre2km","metre2landMile","metre2league","metre2mm","metre2seaMile","metre2yard","CMMIN","CMMAX","FOOTMIN","FOOTMAX","INCHMIN","INCHMAX","KMMIN","KMMAX","LANDMILEMIN","LANDMILEMAX","LEAGUEMIN","LEAGUEMAX","MMMIN","MMMAX","SEAMILEMIN","SEAMILEMAX","YARDMIN","YARDMAX","PASCALMAX","pascal2atm","pascal","p","pascal2bar","pascal2psi","pascal2torr","ATMMIN","ATMMAX","BARMIN","BARMAX","PSIMIN","PSIMAX","TORRMIN","TORRMAX","KELVINMAX","k2c","kelvin","k2f","k2ra","CELSIUSMIN","CELSIUSMAX","DELISLEMIN","DELISLEMAX","FAHRENHEITMIN","FAHRENHEITMAX","NEWTONMIN","NEWTONMAX","RANKINEMIN","RANKINEMAX","REAUMURMIN","REAUMURMAX","ROMERMIN","ROMERMAX","config","howMany","getAngleInUnits","setAngleInUnits","mass","g","mg","o","t","c","f","km","lm","l","sm","y","pressure","a","b","temperature","k2n","k2re","k2ro","d","n","ra","re","ro","App","convertions","keys","Object","getConvertionChoices","convChoice","setConvChoice","className","convertion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.adddd781.chunk.js","sourcesContent":["import { ReactElement } from \"react\";\nimport selectChoice from \"../interfaces/selectChoice\";\n\nconst getOption = (unit: selectChoice): ReactElement<HTMLElement> => {\n    return (\n        <option key={unit.id} value={unit.name}>\n            {unit.name}\n        </option>\n    );\n};\n\nexport default getOption;\n","// groups digits (in string) by nChars (or less if no equal division) from right\nfunction groupByNChars(\n    text: string,\n    nChar: number = 3,\n    sepChar: string = \" \"\n): string {\n    let result: string[] = [];\n    let moduloOfLen: number = text.length % nChar;\n    if (moduloOfLen !== 0) {\n        result.push(text.slice(0, moduloOfLen));\n    }\n    for (let i = moduloOfLen; i < text.length; i += nChar) {\n        result.push(text.slice(i, i + nChar));\n    }\n    return result.join(sepChar);\n}\n\nfunction formatNum(\n    someNum: number,\n    round: number = 3,\n    sepChar: string = \"'\"\n): string {\n    if (isNaN(someNum)) {\n        return \"NaN\";\n    }\n    let results: string[] = Math.abs(someNum).toFixed(round).split(\".\");\n    let result: string =\n        groupByNChars(results[0], 3, sepChar) +\n        \".\" +\n        groupByNChars(results[1], 3, sepChar);\n    return someNum < 0 ? \"-\" + result : result;\n}\n\nexport default formatNum;\n","import React, { ReactElement, useEffect, useState } from \"react\";\n\nimport getOption from \"../utils/getOption\";\nimport formatNum from \"../utils/format\";\nimport selectChoice from \"../interfaces/selectChoice\";\n\nimport \"./Converter.css\";\n\ninterface Props {\n    units: selectChoice[];\n    main2secondary: Function;\n    secondary2main: Function;\n    additionalInfo: string;\n}\n\nconst Converter: React.FC<Props> = (props): ReactElement<HTMLElement> => {\n    const units: selectChoice[] = props.units;\n    const main2secondary: Function = props.main2secondary;\n    const secondary2main: Function = props.secondary2main;\n    const additionalInfo: string = props.additionalInfo;\n\n    const [input, setInput] = useState(\"0\");\n    const [inUnits, setInUnits] = useState(units[0].name);\n    const [howManyMainUnits, setHowManyMainUnits] = useState(0);\n\n    const handleTyping = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        setInput(event.target.value);\n    };\n\n    const handleOption = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n        setInUnits(event.target.value);\n    };\n\n    useEffect(() => {\n        const handleConversion = (): void => {\n            setHowManyMainUnits(secondary2main(parseFloat(input), inUnits));\n        };\n        handleConversion();\n    }, [howManyMainUnits, secondary2main, input, inUnits]);\n\n    useEffect(() => {\n        const setDefaults = (): void => {\n            setInput(\"0\");\n            setHowManyMainUnits(0);\n            setInUnits(units[0].name);\n        };\n        setDefaults();\n    }, [units]);\n\n    const getOutput = (unit: selectChoice): ReactElement<HTMLElement> => {\n        return (\n            <p key={unit.id}>\n                {\" \"}\n                {formatNum(main2secondary(howManyMainUnits, unit.name))} [{unit.name}]\n            </p>\n        );\n    };\n\n    return (\n        <div>\n            <hr />\n            <p>Type some number (allowed chars: digits, period, -, +)</p>\n            <input\n                pattern=\"[-+]{0,1}[0-9]+\\.{0,1}[0-9]{0,}\"\n                placeholder=\"0.00\"\n                maxLength={15}\n                name=\"\"\n                type=\"text\"\n                value={input}\n                onChange={handleTyping}\n            />\n            <p>\n                (red border: incorrect input that may produce incorrect output or 'NaN')\n            </p>\n            <p>\n                (exceeding conversion limit may produce incorrect output: 'NaN' are\n                displayed)\n            </p>\n            <p>Choose input units:</p>\n            <select value={inUnits} onChange={handleOption}>\n                {units.map((unit) => getOption(unit))}\n            </select>\n            <p>{additionalInfo}</p>\n            <h2>&#187;</h2>\n            <div>{units.map((u) => getOutput(u))}</div>\n        </div>\n    );\n};\n\nexport default Converter;\n","import { d2t } from \"./degree\";\nimport { g2t } from \"./gradian\";\nimport { m2t } from \"./mil\";\nimport { r2t } from \"./radian\";\nimport { t2d, t2g, t2m, t2r } from \"./turns\";\n\nclass Angle {\n    private _turns: number = 0;\n    private _negative: boolean = false;\n\n    constructor(turns: number = 0) {\n        this._setInternals(turns);\n    }\n\n    private _setInternals(turns: number = 0): void {\n        turns = (Math.abs(turns) > 1) ? (turns % 1) : turns;\n        if (turns < 0) {\n            this._turns = 1 - turns;\n            this._negative = true;\n        } else {\n            this._turns = turns;\n            this._negative = false;\n        }\n    }\n\n    private _getTurns(): number {\n        return this._negative ? (1 - this._turns) : this._turns;\n    }\n\n    public setAngleInUnits(angle: number, units: string): void {\n        if (units === \"gradian\") {\n            this._setInternals(g2t(angle));\n        } else if (units === \"mil\") {\n            this._setInternals(m2t(angle));\n        } else if (units === \"radian\") {\n            this._setInternals(r2t(angle));\n        } else if (units === \"degree\") {\n            this._setInternals(d2t(angle));\n        } else if (units === \"turn\") {\n            this._setInternals(angle);\n        }\n    }\n\n    public getAngleInUnits(units: string): number {\n        if (units === \"gradian\") {\n            return t2g(this._getTurns());\n        } else if (units === \"mil\") {\n            return t2m(this._getTurns());\n        } else if (units === \"radian\") {\n            return t2r(this._getTurns());\n        } else if (units === \"degree\") {\n            return t2d(this._getTurns());\n        } else if (units === \"turn\") {\n            return this._getTurns();\n        } else {\n            return NaN;\n        }\n    }\n}\n\nexport default Angle;\n","function g2t(gradians: number): number {\n    let turns: number = gradians / 400;\n    return turns;\n}\n\nexport { g2t };\n","function m2t(mils: number): number {\n    let turns: number = mils / 6400;\n    return turns;\n}\n\nexport { m2t };\n","function r2t(radians: number): number {\n    let turns: number = radians / (2 * Math.PI);\n    return turns;\n}\n\nexport { r2t };\n","function d2t(degrees: number): number {\n    let turns: number = degrees / 360;\n    return turns;\n}\n\nexport { d2t };\n","function t2d(turns: number): number {\n    let degrees: number = turns * 360;\n    return degrees;\n}\n\nfunction t2g(turns: number): number {\n    let gradians: number = turns * 400;\n    return gradians;\n}\n\nfunction t2m(turns: number): number {\n    let mils: number = turns * 6400;\n    return mils;\n}\n\nfunction t2r(turns: number): number {\n    let radians: number = turns * (2 * Math.PI);\n    return radians;\n}\n\nexport { t2d, t2g, t2m, t2r };\n","function isOutOfRange(someNum: number,\n    lowExcl: number, highExcl: number): boolean {\n    if (someNum < lowExcl || someNum > highExcl) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport default isOutOfRange;\n","import isOutOfRange from \"./isOutOfRange\";\n\nfunction convertIfInRange(someNum: number,\n    converter: Function,\n    minIncl: number,\n    maxIncl: number): number {\n    if (isOutOfRange(someNum, minIncl, maxIncl)) {\n        return NaN;\n    } else {\n        return converter(someNum);\n    }\n}\n\nexport { convertIfInRange };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\n\nconst KGMIN: number = 0;\nconst KGMAX: number = 1e15;\n\n// mostly based on en.wikipedia + some google searches\nfunction kg2g(kg: number): number {\n    return convertIfInRange(\n        kg,\n        (k: number): number => k * 1e3,\n        KGMIN,\n        KGMAX\n    );\n}\n\nfunction kg2mg(kg: number): number {\n    return convertIfInRange(\n        kg,\n        (k: number): number => k * 1e6,\n        KGMIN,\n        KGMAX\n    );\n}\n\nfunction kg2ounce(kg: number): number {\n    return convertIfInRange(\n        kg,\n        (k: number): number => k * 35.2739619,\n        KGMIN,\n        KGMAX\n    );\n}\n\nfunction kg2pound(kg: number): number {\n    return convertIfInRange(\n        kg,\n        (k: number): number => k / 0.45359237,\n        KGMIN,\n        KGMAX\n    );\n}\n\nfunction kg2tonne(kg: number): number {\n    return convertIfInRange(\n        kg,\n        (k: number): number => k / 1e3,\n        KGMIN,\n        KGMAX\n    );\n}\n\nexport { KGMIN, KGMAX, kg2g, kg2mg, kg2ounce, kg2pound, kg2tonne };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KGMIN, KGMAX, kg2g } from \"./kg\";\n\nconst GMIN: number = kg2g(KGMIN);\nconst GMAX: number = kg2g(KGMAX);\n\nfunction g2kg(gram: number): number {\n    return convertIfInRange(gram,\n        (g: number): number => g / 1e3,\n        GMIN, GMAX);\n}\n\nexport { g2kg };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KGMIN, KGMAX, kg2mg } from \"./kg\";\n\nconst MGMIN: number = kg2mg(KGMIN);\nconst MGMAX: number = kg2mg(KGMAX);\n\nfunction mg2kg(miligram: number): number {\n    return convertIfInRange(miligram,\n        (mg: number): number => mg / 1e6,\n        MGMIN, MGMAX);\n}\n\nexport { mg2kg };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KGMIN, KGMAX, kg2ounce } from \"./kg\";\n\nconst OUNCEMIN: number = kg2ounce(KGMIN);\nconst OUNCEMAX: number = kg2ounce(KGMAX);\n\nfunction ounce2kg(ounce: number): number {\n    return convertIfInRange(ounce,\n        (o: number): number => o / 35.2739619,\n        OUNCEMIN, OUNCEMAX);\n}\n\nexport { ounce2kg };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KGMIN, KGMAX, kg2pound } from \"./kg\";\n\nconst POUNDMIN: number = kg2pound(KGMIN);\nconst POUNDMAX: number = kg2pound(KGMAX);\n\nfunction pound2kg(pound: number): number {\n    return convertIfInRange(pound,\n        (p: number): number => p * 0.45359237,\n        POUNDMIN, POUNDMAX);\n}\n\nexport { pound2kg };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KGMIN, KGMAX, kg2tonne } from \"./kg\";\n\nconst TONNEMIN: number = kg2tonne(KGMIN);\nconst TONNEMAX: number = kg2tonne(KGMAX);\n\nfunction tonne2kg(tonne: number): number {\n    return convertIfInRange(tonne,\n        (t: number): number => t * 1e3,\n        TONNEMIN, TONNEMAX);\n}\n\nexport { tonne2kg };\n","import { g2kg } from \"./g\";\nimport { kg2g, kg2mg, kg2ounce, kg2pound, kg2tonne } from \"./kg\";\nimport { mg2kg } from \"./mg\";\nimport { ounce2kg } from \"./ounce\";\nimport { pound2kg } from \"./pound\";\nimport { tonne2kg } from \"./tonne\";\n\nimport selectChoice from \"../../interfaces/selectChoice\";\n\nfunction kg2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"g\":\n            return kg2g(howMany);\n        case \"mg\":\n            return kg2mg(howMany);\n        case \"ounce\":\n            return kg2ounce(howMany);\n        case \"pound\":\n            return kg2pound(howMany);\n        case \"tonne\":\n            return kg2tonne(howMany);\n        case \"kg\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2kg(howMany: number, units: string): number {\n    switch (units) {\n        case \"g\":\n            return g2kg(howMany);\n        case \"mg\":\n            return mg2kg(howMany);\n        case \"ounce\":\n            return ounce2kg(howMany);\n        case \"pound\":\n            return pound2kg(howMany);\n        case \"tonne\":\n            return tonne2kg(howMany);\n        case \"kg\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst massUnits: selectChoice[] = [\n    { id: 0, name: \"g\" },\n    { id: 1, name: \"kg\" },\n    { id: 2, name: \"mg\" },\n    { id: 3, name: \"ounce\" },\n    { id: 4, name: \"pound\" },\n    { id: 5, name: \"tonne\" },\n]\n\nconst massInfo: string = \"limit: 0-1e15 [kg], SI and imperial/US units, [ounce] == [oz], [pound] = [lb]\";\n\nexport { massInfo, massUnits, kg2units, units2kg };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\n\nconst METREMIN: number = 0;\nconst METREMAX: number = 1e15;\n\n// mostly based on en.wikipedia + some google searches\nfunction metre2cm(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m * 1e2,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2foot(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m * 1e2 / 30.48,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2inch(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m * 1e2 / 2.54,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2km(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m / 1e3,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2landMile(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m / 1609.344,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2league(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m / 5556,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2mm(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m * 1e3,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2seaMile(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m / 1852,\n        METREMIN,\n        METREMAX\n    );\n}\n\nfunction metre2yard(metre: number): number {\n    return convertIfInRange(\n        metre,\n        (m: number): number => m / 0.9144,\n        METREMIN,\n        METREMAX\n    );\n}\n\nexport {\n    METREMIN,\n    METREMAX,\n    metre2cm,\n    metre2foot,\n    metre2inch,\n    metre2km,\n    metre2landMile,\n    metre2league,\n    metre2mm,\n    metre2seaMile,\n    metre2yard,\n};\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2cm } from \"./metre\";\n\nconst CMMIN: number = metre2cm(METREMIN);\nconst CMMAX: number = metre2cm(METREMAX);\n\nfunction cm2metre(cm: number): number {\n    return convertIfInRange(cm,\n        (c: number): number => c / 1e2,\n        CMMIN, CMMAX);\n}\n\nexport { cm2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2foot } from \"./metre\";\n\nconst FOOTMIN: number = metre2foot(METREMIN);\nconst FOOTMAX: number = metre2foot(METREMAX);\n\nfunction foot2metre(foot: number): number {\n    return convertIfInRange(foot,\n        (f: number): number => f * 30.48 / 1e2,\n        FOOTMIN, FOOTMAX);\n}\n\nexport { foot2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2inch } from \"./metre\";\n\nconst INCHMIN: number = metre2inch(METREMIN);\nconst INCHMAX: number = metre2inch(METREMAX);\n\nfunction inch2metre(inch: number): number {\n    return convertIfInRange(inch,\n        (i: number): number => i * 2.54 / 1e2,\n        INCHMIN, INCHMAX);\n}\n\nexport { inch2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2km } from \"./metre\";\n\nconst KMMIN: number = metre2km(METREMIN);\nconst KMMAX: number = metre2km(METREMAX);\n\nfunction km2metre(km: number): number {\n    return convertIfInRange(km,\n        (km: number): number => km * 1e3,\n        KMMIN, KMMAX);\n}\n\nexport { km2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2landMile } from \"./metre\";\n\nconst LANDMILEMIN: number = metre2landMile(METREMIN);\nconst LANDMILEMAX: number = metre2landMile(METREMAX);\n\nfunction landMile2metre(landMile: number): number {\n    return convertIfInRange(landMile,\n        (lm: number): number => lm * 1609.344,\n        LANDMILEMIN, LANDMILEMAX);\n}\n\nexport { landMile2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2league } from \"./metre\";\n\nconst LEAGUEMIN: number = metre2league(METREMIN);\nconst LEAGUEMAX: number = metre2league(METREMAX);\n\nfunction league2metre(league: number): number {\n    return convertIfInRange(league,\n        (l: number): number => l * 5556,\n        LEAGUEMIN, LEAGUEMAX);\n}\n\nexport { league2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2mm } from \"./metre\";\n\nconst MMMIN: number = metre2mm(METREMIN);\nconst MMMAX: number = metre2mm(METREMAX);\n\nfunction mm2metre(mm: number): number {\n    return convertIfInRange(mm,\n        (i: number): number => i / 1e3,\n        MMMIN, MMMAX);\n}\n\nexport { mm2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2seaMile } from \"./metre\";\n\nconst SEAMILEMIN: number = metre2seaMile(METREMIN);\nconst SEAMILEMAX: number = metre2seaMile(METREMAX);\n\nfunction seaMile2metre(seaMile: number): number {\n    return convertIfInRange(seaMile,\n        (sm: number): number => sm * 1852,\n        SEAMILEMIN, SEAMILEMAX);\n}\n\nexport { seaMile2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { METREMIN, METREMAX, metre2yard } from \"./metre\";\n\nconst YARDMIN: number = metre2yard(METREMIN);\nconst YARDMAX: number = metre2yard(METREMAX);\n\nfunction yard2metre(yard: number): number {\n    return convertIfInRange(yard,\n        (y: number): number => y * 0.9144,\n        YARDMIN, YARDMAX);\n}\n\nexport { yard2metre };\n","import { cm2metre } from \"./cm\";\nimport { foot2metre } from \"./foot\"\nimport { inch2metre } from \"./inch\";\nimport { km2metre } from \"./km\";\nimport { landMile2metre } from \"./landMile\";\nimport { league2metre } from \"./league\";\nimport { metre2cm, metre2foot, metre2inch, metre2km, metre2landMile, metre2league, metre2mm, metre2seaMile, metre2yard } from \"./metre\";\nimport { mm2metre } from \"./mm\";\nimport { seaMile2metre } from \"./seaMile\";\nimport { yard2metre } from \"./yard\";\n\nimport selectChoice from \"../../interfaces/selectChoice\";\n\nfunction metre2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"cm\":\n            return metre2cm(howMany);\n        case \"foot\":\n            return metre2foot(howMany);\n        case \"inch\":\n            return metre2inch(howMany);\n        case \"km\":\n            return metre2km(howMany);\n        case \"land mile\":\n            return metre2landMile(howMany);\n        case \"league\":\n            return metre2league(howMany);\n        case \"mm\":\n            return metre2mm(howMany);\n        case \"sea mile\":\n            return metre2seaMile(howMany);\n        case \"yard\":\n            return metre2yard(howMany);\n        case \"metre\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2metre(howMany: number, units: string): number {\n    switch (units) {\n        case \"cm\":\n            return cm2metre(howMany);\n        case \"foot\":\n            return foot2metre(howMany);\n        case \"inch\":\n            return inch2metre(howMany);\n        case \"km\":\n            return km2metre(howMany);\n        case \"land mile\":\n            return landMile2metre(howMany);\n        case \"league\":\n            return league2metre(howMany);\n        case \"mm\":\n            return mm2metre(howMany);\n        case \"sea mile\":\n            return seaMile2metre(howMany);\n        case \"yard\":\n            return yard2metre(howMany);\n        case \"metre\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst lengthUnits: selectChoice[] = [\n    { id: 0, name: \"cm\" },\n    { id: 1, name: \"foot\" },\n    { id: 2, name: \"inch\" },\n    { id: 3, name: \"km\" },\n    { id: 4, name: \"land mile\" },\n    { id: 5, name: \"league\" },\n    { id: 6, name: \"metre\" },\n    { id: 7, name: \"mm\" },\n    { id: 8, name: \"sea mile\" },\n    { id: 9, name: \"yard\" },\n]\n\nconst lengthInfo: string = \"limit: 0-1e15 [metre], SI and imperial/US units\";\n\nexport { lengthInfo, lengthUnits, metre2units, units2metre };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\n\nconst PASCALMIN: number = 0;\nconst PASCALMAX: number = 1e12;\n\n// convertions determined mostly based on info found on en.wikipedia.org\n// e.g. here -> https://en.wikipedia.org/wiki/Torr#Conversion_factors\n// somethimes i used google\n\nfunction pascal2atm(pascal: number): number {\n    return convertIfInRange(pascal,\n        (p: number): number => p * (9.86923267 / 1e6),\n        PASCALMIN, PASCALMAX);\n}\n\nfunction pascal2bar(pascal: number): number {\n    return convertIfInRange(pascal,\n        (p: number): number => p / 1e5,\n        PASCALMIN, PASCALMAX);\n}\n\nfunction pascal2psi(pascal: number): number {\n    return convertIfInRange(pascal,\n        (p: number): number => p * (1.45037738 / 1e4),\n        PASCALMIN, PASCALMAX);\n}\n\n// torr (mm/hg)\nfunction pascal2torr(pascal: number): number {\n    return convertIfInRange(pascal,\n        (p: number): number => p * (7.50061683 / 1e3),\n        PASCALMIN, PASCALMAX);\n}\n\nexport { PASCALMIN, PASCALMAX, pascal2atm, pascal2bar, pascal2psi, pascal2torr };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { PASCALMIN, PASCALMAX, pascal2atm } from \"./pascal\";\n\nconst ATMMIN: number = pascal2atm(PASCALMIN);\nconst ATMMAX: number = pascal2atm(PASCALMAX);\n\nfunction atm2pascal(atm: number): number {\n    return convertIfInRange(atm,\n        (a: number): number => a * 101325,\n        ATMMIN, ATMMAX);\n}\n\nexport { atm2pascal };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { PASCALMIN, PASCALMAX, pascal2bar } from \"./pascal\";\n\nconst BARMIN: number = pascal2bar(PASCALMIN);\nconst BARMAX: number = pascal2bar(PASCALMAX);\n\nfunction bar2pascal(bar: number): number {\n    return convertIfInRange(bar,\n        (b: number): number => b * 1e5,\n        BARMIN, BARMAX);\n}\n\nexport { bar2pascal };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { PASCALMIN, PASCALMAX, pascal2psi } from \"./pascal\";\n\nconst PSIMIN: number = pascal2psi(PASCALMIN);\nconst PSIMAX: number = pascal2psi(PASCALMAX);\n\nfunction psi2pascal(psi: number): number {\n    return convertIfInRange(psi,\n        (a: number): number => a * 6894.75729,\n        PSIMIN, PSIMAX);\n}\n\nexport { psi2pascal };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { PASCALMIN, PASCALMAX, pascal2torr } from \"./pascal\";\n\nconst TORRMIN: number = pascal2torr(PASCALMIN);\nconst TORRMAX: number = pascal2torr(PASCALMAX);\n\nfunction torr2pascal(torr: number): number {\n    return convertIfInRange(torr,\n        (a: number): number => a * 133.3223684211,\n        TORRMIN, TORRMAX);\n}\n\nexport { torr2pascal };\n","import { atm2pascal } from \"./atm\";\nimport { bar2pascal } from \"./bar\";\nimport { pascal2atm, pascal2bar, pascal2psi, pascal2torr } from \"./pascal\";\nimport { psi2pascal } from \"./psi\";\nimport { torr2pascal } from \"./torr\";\n\nimport selectChoice from \"../../interfaces/selectChoice\";\n\nfunction pascal2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"atm\":\n            return pascal2atm(howMany);\n        case \"bar\":\n            return pascal2bar(howMany);\n        case \"psi\":\n            return pascal2psi(howMany);\n        case \"torr\":\n            return pascal2torr(howMany);\n        case \"pascal\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2pascal(howMany: number, units: string): number {\n    switch (units) {\n        case \"atm\":\n            return atm2pascal(howMany);\n        case \"bar\":\n            return bar2pascal(howMany);\n        case \"psi\":\n            return psi2pascal(howMany);\n        case \"torr\":\n            return torr2pascal(howMany);\n        case \"pascal\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst pressureInfo: string = \"limit: 0-1e12 [pascal], [torr] == [mmHg]\";\n\nconst pressureUnits: selectChoice[] = [\n    { id: 0, name: \"atm\" },\n    { id: 1, name: \"bar\" },\n    { id: 2, name: \"pascal\" },\n    { id: 3, name: \"psi\" },\n    { id: 4, name: \"torr\" },\n];\n\nexport { pascal2units, units2pascal, pressureInfo, pressureUnits };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\n\nconst KELVINMIN: number = 0; // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst KELVINMAX: number = 1e8;\n\n// https://en.wikipedia.org/wiki/Conversion_of_scales_of_temperature\nfunction k2c(kelvin: number): number {\n    // to celsius\n    return convertIfInRange(kelvin,\n        (k: number): number => k - 273.15,\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2f(kelvin: number): number {\n    // to fahrenheit\n    return convertIfInRange(kelvin,\n        (k: number): number => k * (9 / 5) - 459.67,\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2ra(kelvin: number): number {\n    // to rankine\n    return convertIfInRange(kelvin,\n        (k: number): number => k * (9 / 5),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2d(kelvin: number): number {\n    // to delisle\n    return convertIfInRange(kelvin,\n        (k: number): number => (373.15 - k) * (3 / 2),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2n(kelvin: number): number {\n    // to newton\n    return convertIfInRange(kelvin,\n        (k: number): number => (k - 273.15) * (33 / 100),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2re(kelvin: number): number {\n    // to reaumur\n    return convertIfInRange(kelvin,\n        (k: number): number => (k - 273.15) * (4 / 5),\n        KELVINMIN, KELVINMAX);\n}\n\nfunction k2ro(kelvin: number): number {\n    // to romer\n    return convertIfInRange(kelvin,\n        (k: number): number => (k - 273.15) * (21 / 40) + 7.5,\n        KELVINMIN, KELVINMAX);\n}\n\nexport { KELVINMIN, KELVINMAX, k2c, k2f, k2ra, k2d, k2n, k2re, k2ro };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst CELSIUSMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst CELSIUSMAX: number = k2c(KELVINMAX);\n\nfunction c2k(celsius: number): number {\n    // to kelvin\n    return convertIfInRange(celsius,\n        (c: number): number => c + 273.15,\n        CELSIUSMIN, CELSIUSMAX);\n}\n\nexport { c2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst DELISLEMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst DELISLEMAX: number = k2c(KELVINMAX);\n\nfunction d2k(delisle: number): number {\n    // to kelvin\n    return convertIfInRange(delisle,\n        (d: number): number => 373.15 - d * (2 / 3),\n        DELISLEMIN, DELISLEMAX);\n}\n\nexport { d2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2f } from \"./kelvin\";\nconst FAHRENHEITMIN: number = k2f(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst FAHRENHEITMAX: number = k2f(KELVINMAX);\n\nfunction f2k(fahrenheit: number): number {\n    // to kelvin\n    return convertIfInRange(fahrenheit,\n        (f: number): number => (f + 459.67) * (5 / 9),\n        FAHRENHEITMIN, FAHRENHEITMAX);\n}\n\nexport { f2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst NEWTONMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst NEWTONMAX: number = k2c(KELVINMAX);\n\nfunction n2k(newton: number): number {\n    // to kelvin\n    return convertIfInRange(newton,\n        (n: number): number => n * (100 / 33) + 273.15,\n        NEWTONMIN, NEWTONMAX);\n}\n\nexport { n2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2ra } from \"./kelvin\";\nconst RANKINEMIN: number = k2ra(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst RANKINEMAX: number = k2ra(KELVINMAX);\n\nfunction ra2k(rankine: number): number {\n    // to kelvin\n    return convertIfInRange(rankine,\n        (ra: number): number => ra * (5 / 9),\n        RANKINEMIN, RANKINEMAX);\n}\n\nexport { ra2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst REAUMURMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst REAUMURMAX: number = k2c(KELVINMAX);\n\nfunction re2k(reaumur: number): number {\n    // to kelvin\n    return convertIfInRange(reaumur,\n        (re: number): number => re * (5 / 4) + 273.15,\n        REAUMURMIN, REAUMURMAX);\n}\n\nexport { re2k };\n","import { convertIfInRange } from \"../../utils/convertIfInRange\";\nimport { KELVINMIN, KELVINMAX, k2c } from \"./kelvin\";\n\nconst ROMERMIN: number = k2c(KELVINMIN); // absolute zero\n// max is: Plank-Temperature = Math.pow(10, 32) Kelvin\n// here I will give somewhat less\nconst ROMERMAX: number = k2c(KELVINMAX);\n\nfunction ro2k(romer: number): number {\n    // to kelvin\n    return convertIfInRange(romer,\n        (ro: number): number => (ro - 7.5) * (40 / 21) + 273.15,\n        ROMERMIN, ROMERMAX);\n}\n\nexport { ro2k };\n","import { c2k } from \"./celsius\";\nimport { d2k } from \"./delisle\";\nimport { f2k } from \"./fahrenheit\";\nimport { k2c, k2f, k2ra, k2d, k2n, k2re, k2ro } from \"./kelvin\";\nimport { n2k } from \"./newton\";\nimport { ra2k } from \"./rankine\";\nimport { re2k } from \"./reaumur\";\nimport { ro2k } from \"./romer\";\nimport selectChoice from \"../../interfaces/selectChoice\";\n\nfunction kelvin2units(howMany: number, units: string): number {\n    switch (units) {\n        case \"celsius\":\n            return k2c(howMany);\n        case \"delisle\":\n            return k2d(howMany);\n        case \"fahrenheit\":\n            return k2f(howMany);\n        case \"newton\":\n            return k2n(howMany);\n        case \"rankine\":\n            return k2ra(howMany);\n        case \"réaumur\":\n            return k2re(howMany);\n        case \"rømer\":\n            return k2ro(howMany);\n        case \"kelvin\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nfunction units2kelvin(howMany: number, units: string): number {\n    switch (units) {\n        case \"celsius\":\n            return c2k(howMany);\n        case \"delisle\":\n            return d2k(howMany);\n        case \"fahrenheit\":\n            return f2k(howMany);\n        case \"newton\":\n            return n2k(howMany);\n        case \"rankine\":\n            return ra2k(howMany);\n        case \"réaumur\":\n            return re2k(howMany);\n        case \"rømer\":\n            return ro2k(howMany);\n        case \"kelvin\":\n            return howMany;\n        default:\n            return NaN;\n    }\n}\n\nconst temperatureUnits: selectChoice[] = [\n    { id: 0, name: \"celsius\" },\n    { id: 1, name: \"delisle\" },\n    { id: 2, name: \"fahrenheit\" },\n    { id: 3, name: \"kelvin\" },\n    { id: 4, name: \"newton\" },\n    { id: 5, name: \"rankine\" },\n    { id: 6, name: \"réaumur\" },\n    { id: 7, name: \"rømer\" },\n]\n\nconst temperatureInfo: string = \"limit: 0-1e8 [kelvin], limit in Physics: 0-Math.pow(10,32) [kelvin]\";\n\nexport { kelvin2units, units2kelvin, temperatureUnits, temperatureInfo };\n","import {\n    turns2units,\n    units2turns,\n    angleUnits,\n    angleInfo,\n} from \"../convertionTypes/angle/converter\";\n\nimport {\n    kg2units,\n    units2kg,\n    massInfo,\n    massUnits,\n} from \"../convertionTypes/mass/converter\";\n\nimport {\n    metre2units,\n    units2metre,\n    lengthInfo,\n    lengthUnits,\n} from \"../convertionTypes/length/converter\";\n\nimport {\n    pascal2units,\n    units2pascal,\n    pressureInfo,\n    pressureUnits,\n} from \"../convertionTypes/pressure/converter\";\n\nimport {\n    kelvin2units,\n    units2kelvin,\n    temperatureUnits,\n    temperatureInfo,\n} from \"../convertionTypes/temperature/converter\";\n\nconst config = {\n    angle: {\n        units: angleUnits,\n        main2secondary: turns2units,\n        secondary2main: units2turns,\n        additionalInfo: angleInfo,\n    },\n    mass: {\n        units: massUnits,\n        main2secondary: kg2units,\n        secondary2main: units2kg,\n        additionalInfo: massInfo,\n    },\n    length: {\n        units: lengthUnits,\n        main2secondary: metre2units,\n        secondary2main: units2metre,\n        additionalInfo: lengthInfo,\n    },\n    pressure: {\n        units: pressureUnits,\n        main2secondary: pascal2units,\n        secondary2main: units2pascal,\n        additionalInfo: pressureInfo,\n    },\n    temperature: {\n        units: temperatureUnits,\n        main2secondary: kelvin2units,\n        secondary2main: units2kelvin,\n        additionalInfo: temperatureInfo,\n    },\n};\n\nexport default config;\n","import Angle from \"./Angle\";\nimport selectChoice from \"../../interfaces/selectChoice\";\n\nfunction turns2units(howMany: number, units: string): number {\n    let angle: Angle = new Angle(howMany);\n    return angle.getAngleInUnits(units);\n}\n\nfunction units2turns(howMany: number, units: string): number {\n    let angle: Angle = new Angle(0);\n    angle.setAngleInUnits(howMany, units);\n    return angle.getAngleInUnits(\"turn\");\n}\n\nconst angleUnits: selectChoice[] = [\n    { id: 0, name: \"degree\" },\n    { id: 1, name: \"gradian\" },\n    { id: 2, name: \"mil\" },\n    { id: 3, name: \"radian\" },\n    { id: 4, name: \"turn\" },\n]\n\nconst angleInfo: string = \"limit: 0-1 [turn], both sides (-/+), angles wrap around 1 [turn]\";\n\nexport { turns2units, units2turns, angleUnits, angleInfo };\n","import React, { ReactElement, useState } from \"react\";\n\nimport Converter from \"./convertionTypes/Converter\";\nimport config from \"./config/config\";\nimport getOption from \"./utils/getOption\";\nimport selectChoice from \"./interfaces/selectChoice\";\n\nimport \"./App.css\";\n\nconst App: React.FC = (): ReactElement<HTMLElement> => {\n    const getConvertionChoices = (config: Object): selectChoice[] => {\n        let result: selectChoice[] = [];\n        let keys: string[] = Object.keys(config);\n        for (let i = 0; i < keys.length; i++) {\n            result.push({ id: i, name: keys[i] });\n        }\n        return result;\n    };\n    const convertions: selectChoice[] = getConvertionChoices(config);\n    const [convChoice, setConvChoice]: [string, Function] = useState(\n        convertions[0].name\n    );\n\n    const handleConvertionChange = (\n        event: React.ChangeEvent<HTMLSelectElement>\n    ): void => {\n        setConvChoice(event.target.value);\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Simple Converter</h1>\n            <p className=\"warning\">No guarantee of correct conversion</p>\n            <p className=\"warning\">Use it at your own risk</p>\n            <p>(Although it should work fine. Still, I expect some rounding errors)</p>\n            <hr />\n            <p>Select conversion type:</p>\n            <select value={convChoice} onChange={handleConvertionChange}>\n                {convertions.map((convertion) => getOption(convertion))}\n            </select>\n            <br /> <br />\n            <Converter\n                units={config[convChoice as keyof typeof config].units}\n                main2secondary={\n                    config[convChoice as keyof typeof config].main2secondary\n                }\n                secondary2main={\n                    config[convChoice as keyof typeof config].secondary2main\n                }\n                additionalInfo={\n                    config[convChoice as keyof typeof config].additionalInfo\n                }\n            />\n        </div>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}